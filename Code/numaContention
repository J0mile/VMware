# VCF Diagnostic Stats Collection Script
# Set your output directory here
$OutputDir = "D:\VMware_Stats"

# Define your vCenter servers
$vCenterServer = @("test.test.test",
                   "test.test.test",
                   "test.test.test",
                   "test.test.test",
                   "test.test.test")

Write-Host "vCenter servers to process: $($vCenterServer.Count)" -ForegroundColor White
$vCenterServer | ForEach-Object { Write-Host "  - $_" -ForegroundColor Gray }

# Get single credential for all vCenters
$Credential = Get-Credential -Message "Enter vCenter credentials"

$allResults = @()
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"

foreach ($vc in $vCenterServer) {
    try {
        # Connect to individual vCenter
        Write-Host "Connecting to $vc..." -ForegroundColor Cyan
        Connect-VIServer -Server $vc -Credential $Credential -ErrorAction Stop
        Write-Host "Connected to $vc" -ForegroundColor Green
        
        # Test connection
        Write-Host "Testing connection..." -ForegroundColor Gray
        $connectionTest = Get-View ServiceInstance
        Write-Host "Connection test passed" -ForegroundColor Green
        
        # Get VMs and their hosts
        Write-Host "Getting VMs and hosts..." -ForegroundColor Cyan
        $vms = Get-VM
        $vmHosts = Get-VMHost
        Write-Host "Found VMs: $($vms.Count) | Hosts: $($vmHosts.Count)" -ForegroundColor White
        
        if ($vms.Count -eq 0) {
            Write-Warning "No VMs found! Check permissions."
            continue
        }
        
        if ($vmHosts.Count -eq 0) {
            Write-Warning "No hosts found! Check permissions."
            continue
        }
        
        # Check available metrics
        Write-Host "Checking available metrics..." -ForegroundColor Cyan
        $testVM = $vms[0]
        $testHost = $vmHosts[0]
        
        Write-Host "Testing metric discovery on VM: $($testVM.Name)" -ForegroundColor Gray
        try {
            $vmMetrics = Get-StatType -Entity $testVM
            Write-Host "VM metrics available: $($vmMetrics.Count)" -ForegroundColor White
        } catch {
            Write-Warning "Failed to get VM metrics: $_"
            continue
        }
        
        Write-Host "Testing metric discovery on Host: $($testHost.Name)" -ForegroundColor Gray  
        try {
            $hostMetrics = Get-StatType -Entity $testHost
            Write-Host "Host metrics available: $($hostMetrics.Count)" -ForegroundColor White
        } catch {
            Write-Warning "Failed to get host metrics: $_"
            continue
        }
        
        # NUMA metrics are on hosts
        $numaMetrics = $hostMetrics | Where-Object {$_.Name -like "*numa*"}
        
        # VM contention metrics
        $vmContentionMetrics = $vmMetrics | Where-Object {$_.Name -like "*cpu.ready*" -or $_.Name -like "*cpu.wait*" -or $_.Name -like "*cpu.costop*"}
        
        Write-Host "Host NUMA: $($numaMetrics.Count) | VM Contention: $($vmContentionMetrics.Count)" -ForegroundColor White
        
        # Show some actual metric names for debugging
        if ($vmMetrics.Count -gt 0) {
            Write-Host "Sample VM metrics:" -ForegroundColor Gray
            $vmMetrics | Where-Object {$_.Name -like "*cpu*"} | Select-Object -First 5 | ForEach-Object { Write-Host "  $($_.Name)" -ForegroundColor DarkGray }
        }
        
        if ($numaMetrics.Count -gt 0) {
            Write-Host "Available NUMA metrics:" -ForegroundColor Gray
            $numaMetrics | Select-Object -First 3 | ForEach-Object { Write-Host "  $($_.Name)" -ForegroundColor DarkGray }
        }
        
        # Collect NUMA and contention data for VMs only
        $metricsToCollect = @()
        
        # Add NUMA metrics if available
        if ($numaMetrics.Count -gt 0) {
            $metricsToCollect += $numaMetrics.Name
        }
        
        # Add contention metrics if available
        if ($contentionMetrics.Count -gt 0) {
            $metricsToCollect += $contentionMetrics.Name
        }
        
        # Add essential VM metrics
        $metricsToCollect += @("cpu.ready.summation", "cpu.wait.summation", "cpu.costop.summation")
        
        # Remove duplicates
        $metricsToCollect = $metricsToCollect | Sort-Object -Unique
        
        foreach ($metric in $metricsToCollect) {
            $vmStats = Get-Stat -Entity $vms -Stat $metric -Start (Get-Date).AddHours(-24) -MaxSamples 10 -ErrorAction SilentlyContinue
            
            foreach ($stat in $vmStats) {
                # Check for duplicate before adding
                $duplicate = $allResults | Where-Object {
                    $_.vCenter -eq $vc -and 
                    $_.EntityName -eq $stat.Entity.Name -and 
                    $_.MetricId -eq $stat.MetricId -and 
                    $_.Timestamp -eq $stat.Timestamp
                }
                
                if (-not $duplicate) {
                    $allResults += [PSCustomObject]@{
                        vCenter = $vc
                        VM = $stat.Entity.Name
                        MetricId = $stat.MetricId
                        Value = $stat.Value
                        Unit = $stat.Unit
                        Timestamp = $stat.Timestamp
                    }
                }
            }
        }
        
    } catch {
        Write-Warning "Failed to connect to $vc : $_"
    } finally {
        if ($global:DefaultVIServers.Count -gt 0) {
            Disconnect-VIServer -Server $vc -Confirm:$false -Force -ErrorAction SilentlyContinue
        }
    }
}

# Export results and analysis
$exportPath = Join-Path $OutputDir "VCF_VM_Analysis_$timestamp.csv"
Write-Host "`nTotal data points collected: $($allResults.Count)" -ForegroundColor White

if ($allResults.Count -gt 0) {
    $allResults | Export-Csv -Path $exportPath -NoTypeInformation
    Write-Host "Data exported to: $exportPath" -ForegroundColor Green
    
    # VM contention analysis
    Write-Host "`n=== VM CONTENTION DATA ===" -ForegroundColor Yellow
    
    $vmContentionData = $allResults | Where-Object {$_.EntityType -eq "VM" -and $_.MetricId -eq "cpu.ready.summation"}
    
    if ($vmContentionData.Count -gt 0) {
        # Calculate metrics per VM
        $vmAnalysis = $vmContentionData | Group-Object EntityName | ForEach-Object {
            $avgReady = ($_.Group | Measure-Object -Property Value -Average).Average
            $maxReady = ($_.Group | Measure-Object -Property Value -Maximum).Maximum
            $vmHost = ($_.Group | Select-Object -First 1).VMHost
            
            [PSCustomObject]@{
                VM = $_.Name
                VMHost = $vmHost
                AvgCpuReadyMs = [Math]::Round($avgReady, 2)
                MaxCpuReadyMs = [Math]::Round($maxReady, 2)
            }
        } | Sort-Object AvgCpuReadyMs -Descending
        
        $vmAnalysis | Format-Table -AutoSize
        
        # Export VM analysis
        $vmAnalysisPath = Join-Path $OutputDir "VM_Contention_Analysis_$timestamp.csv"
        $vmAnalysis | Export-Csv -Path $vmAnalysisPath -NoTypeInformation
        Write-Host "VM analysis exported to: $vmAnalysisPath" -ForegroundColor Green
        
    } else {
        Write-Host "No CPU ready time data collected."
    }
    
    # NUMA analysis
    Write-Host "`n=== NUMA DATA ===" -ForegroundColor Yellow
    
    $numaData = $allResults | Where-Object {$_.EntityType -eq "Host" -and $_.MetricId -like "*numa*"}
    
    if ($numaData.Count -gt 0) {
        # Group NUMA data by host
        $hostNumaAnalysis = $numaData | Group-Object EntityName | ForEach-Object {
            $hostName = $_.Name
            $hostData = $_.Group
            
            foreach ($metric in ($hostData | Group-Object MetricId)) {
                $avgValue = ($metric.Group | Measure-Object -Property Value -Average).Average
                $maxValue = ($metric.Group | Measure-Object -Property Value -Maximum).Maximum
                
                [PSCustomObject]@{
                    Host = $hostName
                    MetricId = $metric.Name
                    AvgValue = [Math]::Round($avgValue, 2)
                    MaxValue = [Math]::Round($maxValue, 2)
                    Unit = ($metric.Group | Select-Object -First 1).Unit
                }
            }
        } | Sort-Object Host, MetricId
        
        $hostNumaAnalysis | Format-Table -AutoSize
        
        # Export NUMA analysis
        $numaAnalysisPath = Join-Path $OutputDir "NUMA_Analysis_$timestamp.csv"
        $hostNumaAnalysis | Export-Csv -Path $numaAnalysisPath -NoTypeInformation
        Write-Host "NUMA analysis exported to: $numaAnalysisPath" -ForegroundColor Green
        
    } else {
        Write-Host "No NUMA data collected."
    }
    
    # Summary counts
    Write-Host "`n=== SUMMARY ===" -ForegroundColor Magenta
    Write-Host "Total VMs: $($vmAnalysis.Count)" -ForegroundColor White
    Write-Host "Total hosts with NUMA data: $(($hostNumaAnalysis | Group-Object Host).Count)" -ForegroundColor White
    
} else {
    Write-Warning "No data collected!"
}
