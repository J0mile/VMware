# VCF Diagnostic Stats Collection Script
# Set your output directory here
$OutputDir = "D:\VMware_Stats"

# Define your vCenter servers
$vCenterServer = @("test.test.test",
                   "test.test.test",
                   "test.test.test",
                   "test.test.test",
                   "test.test.test")

# Get single credential for all vCenters
$Credential = Get-Credential -Message "Enter vCenter credentials"

$allResults = @()
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"

foreach ($vc in $vCenterServer) {
    try {
        # Connect
        Connect-VIServer -Server $vc -Credential $Credential -ErrorAction Stop
        Write-Host "Connected to $vc" -ForegroundColor Green
        
        # Get VMs and their hosts
        $vms = Get-VM
        $vmHosts = Get-VMHost
        Write-Host "Found VMs: $($vms.Count) | Hosts: $($vmHosts.Count)" -ForegroundColor White
        
        if ($vms.Count -eq 0) {
            Write-Warning "No VMs found! Check permissions."
            continue
        }
        
        # Check available metrics
        $testVM = $vms[0]
        $testHost = $vmHosts[0]
        
        $vmMetrics = Get-StatType -Entity $testVM
        $hostMetrics = Get-StatType -Entity $testHost
        
        # NUMA metrics are on hosts
        $numaMetrics = $hostMetrics | Where-Object {$_.Name -like "*numa*"}
        
        # VM contention metrics
        $vmContentionMetrics = $vmMetrics | Where-Object {$_.Name -like "*cpu.ready*" -or $_.Name -like "*cpu.wait*" -or $_.Name -like "*cpu.costop*"}
        
        Write-Host "Host NUMA: $($numaMetrics.Count) | VM Contention: $($vmContentionMetrics.Count)" -ForegroundColor White
        
        # Collect NUMA and contention data for VMs only
        $metricsToCollect = @()
        
        # Add NUMA metrics if available
        if ($numaMetrics.Count -gt 0) {
            $metricsToCollect += $numaMetrics.Name
        }
        
        # Add contention metrics if available
        if ($contentionMetrics.Count -gt 0) {
            $metricsToCollect += $contentionMetrics.Name
        }
        
        # Add essential VM metrics
        $metricsToCollect += @("cpu.ready.summation", "cpu.wait.summation", "cpu.costop.summation")
        
        # Remove duplicates
        $metricsToCollect = $metricsToCollect | Sort-Object -Unique
        
        foreach ($metric in $metricsToCollect) {
            $vmStats = Get-Stat -Entity $vms -Stat $metric -Start (Get-Date).AddHours(-1) -MaxSamples 5 -ErrorAction SilentlyContinue
            
            foreach ($stat in $vmStats) {
                # Check for duplicate before adding
                $duplicate = $allResults | Where-Object {
                    $_.vCenter -eq $vc -and 
                    $_.EntityName -eq $stat.Entity.Name -and 
                    $_.MetricId -eq $stat.MetricId -and 
                    $_.Timestamp -eq $stat.Timestamp
                }
                
                if (-not $duplicate) {
                    $allResults += [PSCustomObject]@{
                        vCenter = $vc
                        VM = $stat.Entity.Name
                        MetricId = $stat.MetricId
                        Value = $stat.Value
                        Unit = $stat.Unit
                        Timestamp = $stat.Timestamp
                    }
                }
            }
        }
        
    } catch {
        Write-Warning "Failed to connect to $vc : $_"
    } finally {
        if ($global:DefaultVIServers.Count -gt 0) {
            Disconnect-VIServer -Server $vc -Confirm:$false -Force -ErrorAction SilentlyContinue
        }
    }
}

# Export results
$exportPath = Join-Path $OutputDir "VCF_Diagnostic_Stats_$timestamp.csv"
Write-Host "`nTotal data points collected: $($allResults.Count)" -ForegroundColor White

if ($allResults.Count -gt 0) {
    $allResults | Export-Csv -Path $exportPath -NoTypeInformation
    Write-Host "Data exported to: $exportPath" -ForegroundColor Green
    $allResults | Group-Object MetricId | Select-Object Name, Count | Format-Table -AutoSize
} else {
    Write-Warning "No data collected!"
}
