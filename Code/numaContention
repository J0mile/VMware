# VCF Diagnostic Stats Collection Script
# Set your output directory here
$OutputDir = "D:\VMware_Stats"

# Define your vCenter servers
$vCenterServer = @("test.test.test",
                   "test.test.test",
                   "test.test.test",
                   "test.test.test",
                   "test.test.test")

# Get single credential for all vCenters
$Credential = Get-Credential -Message "Enter vCenter credentials"

$allResults = @()
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"

foreach ($vc in $vCenterServer) {
    Write-Host "`n=== PROCESSING $vc ===" -ForegroundColor Green
    
    try {
        # Connect
        Connect-VIServer -Server $vc -Credential $Credential -ErrorAction Stop
        Write-Host "Connected to $vc" -ForegroundColor Green
        
        # Get basic inventory (faster queries)
        $vmHosts = Get-VMHost
        $vms = Get-VM
        
        Write-Host "Found: Clusters: $((Get-Cluster).Count) | Hosts: $($vmHosts.Count) | VMs: $($vms.Count)" -ForegroundColor White
        
        if ($vmHosts.Count -eq 0) {
            Write-Warning "No hosts found! Check permissions."
            continue
        }
        
        # Quick metric availability check
        $testHost = $vmHosts[0]
        $availableMetrics = Get-StatType -Entity $testHost
        $numaMetrics = $availableMetrics | Where-Object {$_.Name -like "*numa*"}
        
        Write-Host "Available metrics: $($availableMetrics.Count) | NUMA metrics: $($numaMetrics.Count)" -ForegroundColor White
        
        # Quick test of basic metrics
        $basicStats = Get-Stat -Entity $testHost -Stat "cpu.usage.average" -Start (Get-Date).AddHours(-1) -MaxSamples 3 -ErrorAction SilentlyContinue
        Write-Host "Basic stats test: $($basicStats.Count) data points" -ForegroundColor Green
        
        # Collect actual data (streamlined)
        $metricsToTry = @("cpu.usage.average", "mem.usage.average", "cpu.ready.summation")
        if ($numaMetrics.Count -gt 0) { $metricsToTry += $numaMetrics[0].Name }
        
        foreach ($metric in $metricsToTry) {
            # Hosts
            $hostStats = Get-Stat -Entity $vmHosts -Stat $metric -Start (Get-Date).AddHours(-1) -MaxSamples 5 -ErrorAction SilentlyContinue
            foreach ($stat in $hostStats) {
                $allResults += [PSCustomObject]@{
                    vCenter = $vc
                    EntityType = "Host"
                    EntityName = $stat.Entity.Name
                    MetricId = $stat.MetricId
                    Value = $stat.Value
                    Unit = $stat.Unit
                    Timestamp = $stat.Timestamp
                }
            }
            
            # VMs for CPU/Memory metrics
            if ($metric -like "*cpu*" -or $metric -like "*mem*") {
                $vmStats = Get-Stat -Entity $vms -Stat $metric -Start (Get-Date).AddHours(-1) -MaxSamples 5 -ErrorAction SilentlyContinue
                foreach ($stat in $vmStats) {
                    $allResults += [PSCustomObject]@{
                        vCenter = $vc
                        EntityType = "VM"
                        EntityName = $stat.Entity.Name
                        MetricId = $stat.MetricId
                        Value = $stat.Value
                        Unit = $stat.Unit
                        Timestamp = $stat.Timestamp
                    }
                }
            }
        }
        
    } catch {
        Write-Warning "Failed to connect to $vc : $_"
    } finally {
        if ($global:DefaultVIServers.Count -gt 0) {
            Disconnect-VIServer -Server $vc -Confirm:$false -Force -ErrorAction SilentlyContinue
        }
    }
}

# Export results
$exportPath = Join-Path $OutputDir "VCF_Diagnostic_Stats_$timestamp.csv"
Write-Host "`n=== EXPORT RESULTS ===" -ForegroundColor Magenta
Write-Host "Total data points collected: $($allResults.Count)" -ForegroundColor White

if ($allResults.Count -gt 0) {
    $allResults | Export-Csv -Path $exportPath -NoTypeInformation
    Write-Host "Data exported to: $exportPath" -ForegroundColor Green
    
    # Show summary
    Write-Host "`nData Summary:" -ForegroundColor White
    $allResults | Group-Object EntityType, MetricId | Select-Object Name, Count | Format-Table -AutoSize
    
} else {
    Write-Warning "No data collected! Check the diagnostic output above."
    # Create empty file with diagnostic info
    "No data collected - see PowerShell output for diagnostics" | Out-File $exportPath
}

Write-Host "`nDiagnostic collection completed!" -ForegroundColor Green
