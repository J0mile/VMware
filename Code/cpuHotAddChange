# VM Configuration Update Script - ENHANCED PARALLEL VERSION WITH DETAILED CONSOLE OUTPUT
# This script processes a CSV file to update VM CPU and memory settings in parallel

# Specify the CSV file path here
$CSVPath = "C:\path\to\your\vmlist.csv"

# Specify the report file path here
$ReportPath = "C:\Reports\VM_Configuration_Report_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv"

Write-Host "Starting VM Configuration Update Script (Enhanced Parallel Mode)..." -ForegroundColor Green
Write-Host "Script started at: $(Get-Date)" -ForegroundColor Gray

# Set PowerCLI configuration to ignore certificate warnings
Write-Host "Configuring PowerCLI settings..." -ForegroundColor Yellow
try {
    Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false -Scope Session
    Write-Host "PowerCLI configuration set successfully" -ForegroundColor Green
} catch {
    Write-Warning "Failed to set PowerCLI configuration: $($_.Exception.Message)"
}

# vCenter connection parameters
$vCenterServers = @(
    "test.test.test",
    "test.test.test", 
    "test.test.test",
    "test.test.test",
    "test.test.test"
)

Write-Host "Starting VM Configuration Update Process" -ForegroundColor Cyan
Write-Host "CSV File: $CSVPath" -ForegroundColor Yellow
Write-Host "Report will be saved to: $ReportPath" -ForegroundColor Yellow

# Validate CSV file exists
Write-Host "Checking CSV file..." -ForegroundColor Yellow
if (!(Test-Path $CSVPath)) {
    Write-Error "CSV file not found at path: $CSVPath"
    Read-Host "Press Enter to exit"
    exit 1
}
Write-Host "CSV file found successfully" -ForegroundColor Green

# Read and validate CSV file
Write-Host "Reading CSV file..." -ForegroundColor Yellow
try {
    $VMList = Import-Csv -Path $CSVPath
    Write-Host "Successfully imported CSV with $($VMList.Count) VMs" -ForegroundColor Green
    
    if ($VMList.Count -eq 0) {
        Write-Error "CSV file is empty or contains no data rows"
        Read-Host "Press Enter to exit"
        exit 1
    }
} catch {
    Write-Error "Failed to import CSV file: $($_.Exception.Message)"
    Read-Host "Press Enter to exit"
    exit 1
}

# Validate CSV headers
Write-Host "Validating CSV headers..." -ForegroundColor Yellow
$requiredHeaders = @("VMName", "PowerState", "CPUHotAddEnabled", "MemoryHotAddEnabled", "CPUCountBefore", "CPUCountAfter")
$csvHeaders = $VMList[0].PSObject.Properties.Name
$missingHeaders = $requiredHeaders | Where-Object { $_ -notin $csvHeaders }

if ($missingHeaders) {
    Write-Error "Missing required CSV headers: $($missingHeaders -join ', ')"
    Write-Host "Required headers: $($requiredHeaders -join ', ')" -ForegroundColor Yellow
    Read-Host "Press Enter to exit"
    exit 1
}
Write-Host "CSV headers validated successfully" -ForegroundColor Green

# Connect to vCenter servers
Write-Host "Preparing to connect to vCenter servers..." -ForegroundColor Yellow
$Credential = Get-Credential -Message "Enter vCenter credentials"

if (!$Credential) {
    Write-Error "No credentials provided. Exiting."
    Read-Host "Press Enter to exit"
    exit 1
}

$connectedServers = @()

Write-Host "Attempting to connect to vCenter servers..." -ForegroundColor Yellow
foreach ($vc in $vCenterServers) {
    Write-Host "Connecting to $vc..." -ForegroundColor Gray
    try {
        Connect-VIServer -Server $vc -Credential $Credential -ErrorAction Stop
        Write-Host "Connected to $vc" -ForegroundColor Green
        $connectedServers += $vc
    } catch {
        Write-Warning "Failed to connect to $vc : $($_.Exception.Message)"
    }
}

if ($connectedServers.Count -eq 0) {
    Write-Error "Failed to connect to any vCenter servers"
    Read-Host "Press Enter to exit"
    exit 1
}

Write-Host "Successfully connected to $($connectedServers.Count) vCenter server(s)" -ForegroundColor Green

# Display confirmation
Write-Host "`n" + "=" * 80 -ForegroundColor Yellow
Write-Host "VM CONFIGURATION CHANGE CONFIRMATION" -ForegroundColor Yellow
Write-Host "=" * 80 -ForegroundColor Yellow

foreach ($vmEntry in $VMList) {
    Write-Host "VM: $($vmEntry.VMName) | CPU: $($vmEntry.CPUCountBefore) -> $($vmEntry.CPUCountAfter) | Hot Add: Enabled" -ForegroundColor Cyan
}

Write-Host "`nTotal VMs: $($VMList.Count) | Processing: PARALLEL" -ForegroundColor Yellow
Write-Host "WARNING: VMs will be shut down and reconfigured!" -ForegroundColor Red
Write-Host "`nPress ENTER to continue or CTRL+C to cancel..." -ForegroundColor White
Read-Host

# Create robust script block for parallel processing
$vmProcessingScript = {
    param($vmData, $vCenterList, $username, $password, $jobId)
    
    # Create a unique log identifier
    $logPrefix = "[$($vmData.VMName)][Job$jobId]"
    $progressLog = @()
    
    function Add-ProgressLog {
        param($Message, $LogLevel = "INFO")
        $timestamp = Get-Date -Format "HH:mm:ss.fff"
        $logEntry = "$timestamp $logPrefix [$LogLevel] $Message"
        $script:progressLog += $logEntry
        
        # Create structured output for console processing
        $output = [PSCustomObject]@{
            Type = "ProgressUpdate"
            VMName = $vmData.VMName
            JobId = $jobId
            Timestamp = $timestamp
            LogLevel = $LogLevel
            Message = $Message
            FullLogEntry = $logEntry
        }
        Write-Output $output
    }
    
    try {
        Add-ProgressLog "STARTING - Initializing job environment" "START"
        
        # Recreate credential securely
        $securePassword = ConvertTo-SecureString -String $password -AsPlainText -Force
        $jobCredential = New-Object System.Management.Automation.PSCredential($username, $securePassword)
        
        # Import PowerCLI with retry logic
        $moduleLoaded = $false
        $retryCount = 0
        while (-not $moduleLoaded -and $retryCount -lt 3) {
            try {
                if (Get-Module -ListAvailable -Name VMware.PowerCLI) {
                    Import-Module VMware.PowerCLI -Force -Global -ErrorAction Stop
                } elseif (Get-Module -ListAvailable -Name VMware.VimAutomation.Core) {
                    Import-Module VMware.VimAutomation.Core -Force -Global -ErrorAction Stop
                    Import-Module VMware.VimAutomation.Common -Force -Global -ErrorAction SilentlyContinue
                } else {
                    throw "PowerCLI modules not found"
                }
                
                Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false -Scope AllUsers -ErrorAction SilentlyContinue
                $moduleLoaded = $true
                Add-ProgressLog "INITIALIZED - PowerCLI loaded successfully" "SUCCESS"
            } catch {
                $retryCount++
                Add-ProgressLog "MODULE_RETRY - Attempt $retryCount failed: $($_.Exception.Message)" "WARN"
                Start-Sleep -Seconds 2
            }
        }
        
        if (-not $moduleLoaded) {
            throw "Failed to load PowerCLI after 3 attempts"
        }
        
        # Initialize result object
        $result = [PSCustomObject]@{
            Type = "FinalResult"
            VMName = $vmData.VMName
            JobId = $jobId
            Status = "Processing"
            OriginalPowerState = $vmData.PowerState
            OriginalCPUCount = $vmData.CPUCountBefore
            TargetCPUCount = $vmData.CPUCountAfter
            NewCPUCount = ""
            NewCoresPerSocket = ""
            NewCPUHotAddEnabled = ""
            NewMemoryHotAddEnabled = ""
            FinalPowerState = ""
            ErrorMessage = ""
            StartTime = Get-Date
            EndTime = $null
            ProcessingTimeMinutes = 0
            ProgressLog = $progressLog
        }
        
        # Connect to vCenter servers
        Add-ProgressLog "CONNECTING - Attempting vCenter connections" "INFO"
        $jobConnections = @()
        
        foreach ($vcServer in $vCenterList) {
            try {
                $connection = Connect-VIServer -Server $vcServer -Credential $jobCredential -ErrorAction Stop
                $jobConnections += $vcServer
                Add-ProgressLog "CONNECTED - Successfully connected to $vcServer" "SUCCESS"
                
                # Try to find VM immediately
                $testVM = Get-VM -Name $vmData.VMName -Server $vcServer -ErrorAction SilentlyContinue
                if ($testVM) {
                    Add-ProgressLog "VM_LOCATED - Found VM on $vcServer" "SUCCESS"
                    break
                }
            } catch {
                Add-ProgressLog "CONNECT_FAILED - $vcServer : $($_.Exception.Message)" "ERROR"
            }
        }
        
        if ($jobConnections.Count -eq 0) {
            throw "No vCenter connections established"
        }
        
        # Locate the VM
        Add-ProgressLog "SEARCHING - Looking for VM across $($jobConnections.Count) connected servers" "INFO"
        $targetVM = $null
        $vmServer = $null
        
        foreach ($server in $jobConnections) {
            $targetVM = Get-VM -Name $vmData.VMName -Server $server -ErrorAction SilentlyContinue
            if ($targetVM) {
                $vmServer = $server
                Add-ProgressLog "VM_FOUND - Located on $server (Current Power: $($targetVM.PowerState), CPUs: $($targetVM.NumCpu))" "SUCCESS"
                break
            }
        }
        
        if (-not $targetVM) {
            throw "VM '$($vmData.VMName)' not found on any connected vCenter"
        }
        
        # PHASE 1: Shutdown if needed
        if ($targetVM.PowerState -eq "PoweredOn") {
            Add-ProgressLog "SHUTDOWN_START - Initiating graceful shutdown (VMware Tools required)" "INFO"
            Shutdown-VMGuest -VM $targetVM -Confirm:$false
            
            $shutdownTimeout = (Get-Date).AddMinutes(8)
            $shutdownStart = Get-Date
            
            while ($targetVM.PowerState -ne "PoweredOff" -and (Get-Date) -lt $shutdownTimeout) {
                Start-Sleep -Seconds 10
                $targetVM = Get-VM -Name $vmData.VMName -Server $vmServer
                $elapsed = [math]::Round(((Get-Date) - $shutdownStart).TotalSeconds)
                
                if ($elapsed % 30 -eq 0 -or $elapsed -in @(10, 20)) {
                    Add-ProgressLog "SHUTDOWN_WAIT - Graceful shutdown in progress (${elapsed}s elapsed, State: $($targetVM.PowerState))" "INFO"
                }
            }
            
            if ($targetVM.PowerState -ne "PoweredOff") {
                Add-ProgressLog "SHUTDOWN_FORCE - Graceful timeout reached, forcing power off" "WARN"
                Stop-VM -VM $targetVM -Confirm:$false
                Start-Sleep -Seconds 5
                $targetVM = Get-VM -Name $vmData.VMName -Server $vmServer
            }
            
            $shutdownDuration = [math]::Round(((Get-Date) - $shutdownStart).TotalSeconds)
            Add-ProgressLog "SHUTDOWN_COMPLETE - VM powered off (took ${shutdownDuration}s)" "SUCCESS"
        } else {
            Add-ProgressLog "SHUTDOWN_SKIP - VM already powered off, proceeding to reconfiguration" "INFO"
        }
        
        # PHASE 2: Reconfigure VM
        Add-ProgressLog "CONFIG_START - Beginning VM reconfiguration" "INFO"
        $vmView = Get-View -VIObject $targetVM
        $targetCPUs = [int]$vmData.CPUCountAfter
        
        # Log current configuration
        Add-ProgressLog "CONFIG_CURRENT - Current: $($vmView.Config.Hardware.NumCPU) CPUs, $($vmView.Config.Hardware.NumCoresPerSocket) cores/socket" "INFO"
        Add-ProgressLog "CONFIG_TARGET - Target: $targetCPUs CPUs, 1 core/socket, Hot Add enabled" "INFO"
        
        $configSpec = New-Object VMware.Vim.VirtualMachineConfigSpec
        $configSpec.NumCPUs = $targetCPUs
        $configSpec.NumCoresPerSocket = 1
        $configSpec.CpuHotAddEnabled = $true
        $configSpec.MemoryHotAddEnabled = $true
        
        Add-ProgressLog "CONFIG_APPLY - Applying configuration changes via vSphere API" "INFO"
        $vmView.ReconfigVM($configSpec)
        Add-ProgressLog "CONFIG_COMPLETE - VM reconfiguration applied successfully" "SUCCESS"
        
        # PHASE 3: Power on
        Add-ProgressLog "POWERON_START - Starting VM power on sequence" "INFO"
        Start-VM -VM $targetVM -Confirm:$false
        
        $powerOnTimeout = (Get-Date).AddMinutes(8)
        $powerOnStart = Get-Date
        
        while ($targetVM.PowerState -ne "PoweredOn" -and (Get-Date) -lt $powerOnTimeout) {
            Start-Sleep -Seconds 10
            $targetVM = Get-VM -Name $vmData.VMName -Server $vmServer
            $elapsed = [math]::Round(((Get-Date) - $powerOnStart).TotalSeconds)
            
            if ($elapsed % 30 -eq 0 -or $elapsed -in @(10, 20)) {
                Add-ProgressLog "POWERON_WAIT - VM starting up (${elapsed}s elapsed, State: $($targetVM.PowerState))" "INFO"
            }
        }
        
        $powerOnDuration = [math]::Round(((Get-Date) - $powerOnStart).TotalSeconds)
        if ($targetVM.PowerState -eq "PoweredOn") {
            Add-ProgressLog "POWERON_COMPLETE - VM started successfully (took ${powerOnDuration}s)" "SUCCESS"
        } else {
            Add-ProgressLog "POWERON_TIMEOUT - VM did not start within timeout (${powerOnDuration}s)" "WARN"
        }
        
        # PHASE 4: Verify and finalize
        Add-ProgressLog "VERIFY_START - Checking final configuration" "INFO"
        $targetVM = Get-VM -Name $vmData.VMName -Server $vmServer
        $finalVmView = Get-View -VIObject $targetVM
        
        $result.NewCPUCount = $finalVmView.Config.Hardware.NumCPU
        $result.NewCoresPerSocket = $finalVmView.Config.Hardware.NumCoresPerSocket
        $result.NewCPUHotAddEnabled = $finalVmView.Config.CpuHotAddEnabled
        $result.NewMemoryHotAddEnabled = $finalVmView.Config.MemoryHotAddEnabled
        $result.FinalPowerState = $targetVM.PowerState
        $result.Status = "Success"
        $result.EndTime = Get-Date
        $result.ProcessingTimeMinutes = [math]::Round(($result.EndTime - $result.StartTime).TotalMinutes, 2)
        
        Add-ProgressLog "SUCCESS - Processing completed in $($result.ProcessingTimeMinutes) minutes" "SUCCESS"
        Add-ProgressLog "FINAL_CONFIG - CPUs: $($result.NewCPUCount), Cores/Socket: $($result.NewCoresPerSocket), Power: $($result.FinalPowerState)" "SUCCESS"
        Add-ProgressLog "VERIFICATION - Hot Add CPU: $($result.NewCPUHotAddEnabled), Hot Add Memory: $($result.NewMemoryHotAddEnabled)" "SUCCESS"
        
        # Cleanup connections
        foreach ($server in $jobConnections) {
            try {
                Disconnect-VIServer -Server $server -Confirm:$false -Force -ErrorAction SilentlyContinue
            } catch {
                # Ignore cleanup errors
            }
        }
        
    } catch {
        $result.Status = "Failed"
        $result.ErrorMessage = $_.Exception.Message
        $result.EndTime = Get-Date
        if ($result.StartTime) {
            $result.ProcessingTimeMinutes = [math]::Round(($result.EndTime - $result.StartTime).TotalMinutes, 2)
        }
        Add-ProgressLog "FAILED - $($_.Exception.Message)" "ERROR"
    }
    
    # Always include the progress log in the result
    $result.ProgressLog = $progressLog
    
    # Return the result object
    Write-Output $result
}

# Extract credentials for job parameters
$Username = $Credential.UserName
$Password = $Credential.GetNetworkCredential().Password

# Start parallel processing with enhanced monitoring
Write-Host "`n" + "=" * 80 -ForegroundColor Cyan
Write-Host "STARTING PARALLEL PROCESSING" -ForegroundColor Cyan
Write-Host "=" * 80 -ForegroundColor Cyan
Write-Host "Maximum concurrent jobs: 4" -ForegroundColor Yellow
Write-Host "Real-time monitoring enabled" -ForegroundColor Yellow

$jobs = @()
$maxJobs = 4
$jobCounter = 1
$scriptStartTime = Get-Date

# Job tracking arrays
$results = @()
$processedJobs = @()
$jobStatus = @{}

# Start jobs in batches
foreach ($vmEntry in $VMList) {
    # Wait for available slot
    while ((Get-Job -State Running).Count -ge $maxJobs) {
        Start-Sleep -Seconds 1
        
        # Process real-time updates from running jobs
        $runningJobs = Get-Job -State Running
        foreach ($runningJob in $runningJobs) {
            $updates = Receive-Job -Job $runningJob -Keep | Where-Object { $_.Type -eq "ProgressUpdate" }
            foreach ($update in $updates) {
                if (-not $jobStatus.ContainsKey($update.JobId)) {
                    $jobStatus[$update.JobId] = @()
                }
                
                # Only show new updates
                if ($jobStatus[$update.JobId] -notcontains $update.FullLogEntry) {
                    $jobStatus[$update.JobId] += $update.FullLogEntry
                    
                    # Color code based on log level
                    $color = switch ($update.LogLevel) {
                        "START" { "Cyan" }
                        "SUCCESS" { "Green" }
                        "ERROR" { "Red" }
                        "WARN" { "Yellow" }
                        default { "Gray" }
                    }
                    
                    Write-Host $update.FullLogEntry -ForegroundColor $color
                }
            }
        }
        
        # Check for completed jobs
        $completedJobs = Get-Job | Where-Object { $_.State -ne 'Running' -and $_.Id -notin $processedJobs }
        foreach ($completedJob in $completedJobs) {
            $jobInfo = $jobs | Where-Object { $_.Job.Id -eq $completedJob.Id }
            if ($jobInfo) {
                Write-Host "`n>>> PROCESSING COMPLETED JOB FOR VM: $($jobInfo.VMName) <<<" -ForegroundColor Magenta
                
                try {
                    $jobOutput = Receive-Job -Job $completedJob -ErrorAction Stop
                    $vmResult = $jobOutput | Where-Object { $_.Type -eq "FinalResult" } | Select-Object -Last 1
                    
                    if ($vmResult) {
                        $results += $vmResult
                        $duration = [math]::Round(((Get-Date) - $jobInfo.StartTime).TotalMinutes, 2)
                        
                        if ($vmResult.Status -eq "Success") {
                            Write-Host "✓ SUCCESS: $($vmResult.VMName)" -ForegroundColor Green
                            Write-Host "  └─ Configuration: $($vmResult.NewCPUCount) CPUs, $($vmResult.NewCoresPerSocket) cores/socket" -ForegroundColor Green
                            Write-Host "  └─ Power State: $($vmResult.FinalPowerState)" -ForegroundColor Green
                            Write-Host "  └─ Processing Time: $duration minutes" -ForegroundColor Green
                        } else {
                            Write-Host "✗ FAILED: $($vmResult.VMName)" -ForegroundColor Red
                            Write-Host "  └─ Error: $($vmResult.ErrorMessage)" -ForegroundColor Red
                            Write-Host "  └─ Processing Time: $duration minutes" -ForegroundColor Red
                        }
                    } else {
                        Write-Warning "Could not extract result for VM: $($jobInfo.VMName)"
                    }
                } catch {
                    Write-Warning "Error processing job $($completedJob.Id): $_"
                }
                
                Remove-Job -Job $completedJob -Force
                $processedJobs += $completedJob.Id
                
                Write-Host ">>> JOB PROCESSING COMPLETE <<<`n" -ForegroundColor Magenta
            }
        }
    }
    
    # Start new job
    $job = Start-Job -ScriptBlock $vmProcessingScript -ArgumentList $vmEntry, $vCenterServers, $Username, $Password, $jobCounter
    $jobs += [PSCustomObject]@{
        Job = $job
        VMName = $vmEntry.VMName 
        JobId = $jobCounter
        StartTime = Get-Date
    }
    
    Write-Host "`nLAUNCHED JOB $jobCounter FOR VM: $($vmEntry.VMName)" -ForegroundColor Cyan -BackgroundColor DarkBlue
    Write-Host "   PowerShell Job ID: $($job.Id) | Target CPUs: $($vmEntry.CPUCountBefore) → $($vmEntry.CPUCountAfter)" -ForegroundColor White
    $jobCounter++
    
    # Small delay to prevent overwhelming the system
    Start-Sleep -Seconds 1
}

Write-Host "`n" + "=" * 80 -ForegroundColor Green
Write-Host "ALL JOBS LAUNCHED - MONITORING PROGRESS" -ForegroundColor Green
Write-Host "=" * 80 -ForegroundColor Green
Write-Host "Active PowerShell jobs: $((Get-Job -State Running).Count)" -ForegroundColor Yellow

# Enhanced job monitoring with comprehensive real-time updates
$lastSummaryUpdate = Get-Date

while ($jobs.Count -gt $processedJobs.Count) {
    # Process real-time updates from all running jobs
    $runningJobs = Get-Job -State Running
    foreach ($runningJob in $runningJobs) {
        $updates = Receive-Job -Job $runningJob -Keep | Where-Object { $_.Type -eq "ProgressUpdate" }
        foreach ($update in $updates) {
            if (-not $jobStatus.ContainsKey($update.JobId)) {
                $jobStatus[$update.JobId] = @()
            }
            
            # Only show new updates
            if ($jobStatus[$update.JobId] -notcontains $update.FullLogEntry) {
                $jobStatus[$update.JobId] += $update.FullLogEntry
                
                # Color code and add visual indicators based on log level
                $indicator = switch ($update.LogLevel) {
                    "START" { "[START]" }
                    "SUCCESS" { "[SUCCESS]" }
                    "ERROR" { "[ERROR]" }
                    "WARN" { "[WARN]" }
                    default { "[INFO]" }
                }
                
                $color = switch ($update.LogLevel) {
                    "START" { "Cyan" }
                    "SUCCESS" { "Green" }
                    "ERROR" { "Red" }
                    "WARN" { "Yellow" }
                    default { "Gray" }
                }
                
                Write-Host "$indicator $($update.FullLogEntry)" -ForegroundColor $color
            }
        }
    }
    
    # Check for completed jobs
    $completedJobs = Get-Job | Where-Object { $_.State -ne 'Running' -and $_.Id -notin $processedJobs }
    foreach ($completedJob in $completedJobs) {
        $jobInfo = $jobs | Where-Object { $_.Job.Id -eq $completedJob.Id }
        if ($jobInfo) {
            Write-Host "`n" + "=" * 50 -ForegroundColor Magenta
            Write-Host "PROCESSING COMPLETED JOB FOR VM: $($jobInfo.VMName)" -ForegroundColor Magenta -BackgroundColor DarkMagenta
            Write-Host "=" * 50 -ForegroundColor Magenta
            
            try {
                $jobOutput = Receive-Job -Job $completedJob -ErrorAction Stop
                $vmResult = $jobOutput | Where-Object { $_.Type -eq "FinalResult" } | Select-Object -Last 1
                
                if ($vmResult) {
                    $results += $vmResult
                    $duration = [math]::Round(((Get-Date) - $jobInfo.StartTime).TotalMinutes, 2)
                    
                    if ($vmResult.Status -eq "Success") {
                        Write-Host "*** SUCCESS: $($vmResult.VMName)" -ForegroundColor Green -BackgroundColor DarkGreen
                        Write-Host "    Configuration: $($vmResult.OriginalCPUCount) -> $($vmResult.NewCPUCount) CPUs, $($vmResult.NewCoresPerSocket) cores/socket" -ForegroundColor Green
                        Write-Host "    Power State: $($vmResult.FinalPowerState)" -ForegroundColor Green
                        Write-Host "    Hot Add CPU: $($vmResult.NewCPUHotAddEnabled) | Hot Add Memory: $($vmResult.NewMemoryHotAddEnabled)" -ForegroundColor Green
                        Write-Host "    Processing Time: $duration minutes" -ForegroundColor Green
                    } else {
                        Write-Host "*** FAILURE: $($vmResult.VMName)" -ForegroundColor Red -BackgroundColor DarkRed
                        Write-Host "    Error: $($vmResult.ErrorMessage)" -ForegroundColor Red
                        Write-Host "    Processing Time: $duration minutes" -ForegroundColor Red
                    }
                } else {
                    Write-Warning "Could not extract result for VM: $($jobInfo.VMName)"
                }
            } catch {
                Write-Warning "Error processing job $($completedJob.Id): $_"
            }
            
            Remove-Job -Job $completedJob -Force
            $processedJobs += $completedJob.Id
            
            Write-Host "=" * 50 -ForegroundColor Magenta
            Write-Host ""
        }
    }
    
    # Comprehensive status update every 20 seconds
    if (((Get-Date) - $lastSummaryUpdate).TotalSeconds -ge 20) {
        $completed = $processedJobs.Count
        $running = $runningJobs.Count
        $total = $jobs.Count
        $elapsedTotal = [math]::Round(((Get-Date) - $scriptStartTime).TotalMinutes, 1)
        
        Write-Host "`n" + "=" * 30 -ForegroundColor Yellow
        Write-Host "COMPREHENSIVE STATUS UPDATE - $elapsedTotal minutes elapsed" -ForegroundColor Yellow -BackgroundColor DarkYellow
        Write-Host "=" * 30 -ForegroundColor Yellow
        Write-Host "Completed: $completed/$total" -ForegroundColor Green
        Write-Host "Running: $running" -ForegroundColor Cyan
        Write-Host "Remaining: $($total - $completed)" -ForegroundColor Yellow
        Write-Host "Success Rate: $([math]::Round(($results | Where-Object {$_.Status -eq 'Success'}).Count / [math]::Max($completed, 1) * 100, 1))%" -ForegroundColor Green
        
        if ($running -gt 0) {
            Write-Host "`nCURRENTLY PROCESSING:" -ForegroundColor Cyan
            $runningJobsInfo = $jobs | Where-Object { $_.Job.Id -in $runningJobs.Id }
            foreach ($runningJob in $runningJobsInfo) {
                $elapsed = [math]::Round(((Get-Date) - $runningJob.StartTime).TotalMinutes, 1)
                Write-Host "   • $($runningJob.VMName) (Job $($runningJob.JobId) - ${elapsed}m)" -ForegroundColor White
            }
        }
        
        Write-Host "=" * 30 -ForegroundColor Yellow
        Write-Host ""
        
        $lastSummaryUpdate = Get-Date
    }
    
    Start-Sleep -Seconds 2
}

# Final processing and comprehensive reporting
$totalScriptTime = [math]::Round(((Get-Date) - $scriptStartTime).TotalMinutes, 2)

Write-Host "`n" + "=" * 80 -ForegroundColor Green
Write-Host "*** ALL JOBS COMPLETED - GENERATING COMPREHENSIVE FINAL REPORT ***" -ForegroundColor Green -BackgroundColor DarkGreen
Write-Host "=" * 80 -ForegroundColor Green

if ($results.Count -gt 0) {
    # Export detailed report
    $results | Export-Csv -Path $ReportPath -NoTypeInformation
    
    # Comprehensive summary statistics
    $successful = ($results | Where-Object { $_.Status -eq "Success" }).Count
    $failed = ($results | Where-Object { $_.Status -eq "Failed" }).Count
    $avgTime = if ($results.Count -gt 0) { [math]::Round(($results | Measure-Object ProcessingTimeMinutes -Average).Average, 2) } else { 0 }
    $maxTime = if ($results.Count -gt 0) { [math]::Round(($results | Measure-Object ProcessingTimeMinutes -Maximum).Maximum, 2) } else { 0 }
    $minTime = if ($results.Count -gt 0) { [math]::Round(($results | Measure-Object ProcessingTimeMinutes -Minimum).Minimum, 2) } else { 0 }
    
    Write-Host "`nCOMPREHENSIVE FINAL SUMMARY:" -ForegroundColor Cyan -BackgroundColor DarkCyan
    Write-Host "=" * 50 -ForegroundColor Cyan
    Write-Host "Total VMs Processed: $($results.Count)" -ForegroundColor Yellow
    Write-Host "Successful Operations: $successful" -ForegroundColor Green
    Write-Host "Failed Operations: $failed" -ForegroundColor Red
    Write-Host "Success Rate: $([math]::Round($successful / [math]::Max($results.Count, 1) * 100, 1))%" -ForegroundColor $(if ($successful -eq $results.Count) { "Green" } else { "Yellow" })
    Write-Host "Total Script Runtime: $totalScriptTime minutes" -ForegroundColor Yellow
    Write-Host "Average Processing Time per VM: $avgTime minutes" -ForegroundColor Yellow
    Write-Host "Fastest VM Processing: $minTime minutes" -ForegroundColor Green
    Write-Host "Slowest VM Processing: $maxTime minutes" -ForegroundColor Yellow
    Write-Host "Report File: $ReportPath" -ForegroundColor Cyan
    Write-Host "=" * 50 -ForegroundColor Cyan$
