# VMware Cluster Capacity Analysis Script - N-2 Version
# Calculates cluster capacity based on N-2 availability model

# Connection to multiple vCenter Servers
$vCenterServers = @(
    "vcenter1.domain.com",
    "vcenter2.domain.com", 
    "vcenter3.domain.com"
)

# Configuration - Modify these values as needed
$CpuOvercommitRatio = 3.0             # 3:1 CPU overcommit ratio

# Email Configuration
$SendEmail = $true                     # Set to $false to disable email
$EmailTo = "admin@company.com"         # Recipient email
$EmailFrom = "vmware-reports@company.com" # Sender email
$EmailSubject = "VMware Cluster Capacity Analysis (N-2) - $(Get-Date -Format 'yyyy-MM-dd')"
$SMTPServer = "mail.company.com"       # Your SMTP server
$SMTPPort = 465                        # SSL port (465 for SSL, 587 for TLS)
$UseSSL = $true                        # Use SSL encryption
$SMTPCredentials = $null               # No SMTP authentication required

# Get credentials once at the start
Write-Host "Please enter your vCenter credentials:" -ForegroundColor Yellow
$Credential = Get-Credential

# Suppress certificate warnings (optional)
Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false -Scope Session

try {
    # Connect to vCenter Servers
    Write-Host "Connecting to vCenter Servers:" -ForegroundColor Green
    
    foreach ($server in $vCenterServers) {
        if (-not [string]::IsNullOrWhiteSpace($server)) {
            $cleanServer = $server.Trim()
            if ($cleanServer -ne "") {
                Write-Host "  Attempting connection to: $cleanServer" -ForegroundColor Cyan
                try {
                    Connect-VIServer -Server $cleanServer -Credential $Credential -ErrorAction Stop
                    Write-Host "    ✓ Connected successfully" -ForegroundColor Green
                } catch {
                    Write-Host "    ✗ Failed to connect: $($_.Exception.Message)" -ForegroundColor Red
                    continue
                }
            }
        }
    }

    # Get all clusters from all connected vCenter servers
    $clusters = Get-Cluster | Where-Object { $_.HAEnabled -eq $true }
    
    # Initialize results collection for email
    $allResults = @()
    
    Write-Host "`nAnalyzing cluster capacity across all vCenter servers (N-2 model)..." -ForegroundColor Yellow
    
    foreach ($cluster in $clusters) {
        # Get the vCenter server this cluster belongs to
        $vCenterName = [string]($cluster.Uid.Split('@')[1].Split(':')[0])
        
        Write-Host "Processing vCenter: $vCenterName, Cluster: $($cluster.Name)" -ForegroundColor Cyan
        
        # Get all connected hosts in cluster
        $hosts = $cluster | Get-VMHost | Where-Object { $_.ConnectionState -eq "Connected" -and $_.PowerState -eq "PoweredOn" }
        $totalHosts = [int]$hosts.Count
        
        if ($totalHosts -lt 3) {
            Write-Host "  Insufficient hosts for N-2 analysis (need at least 3)" -ForegroundColor Yellow
            continue
        }
        
        # Calculate total cluster resources - convert to proper numeric types
        $totalCpuMhz = [double](($hosts | Measure-Object -Property CpuTotalMhz -Sum).Sum)
        $totalMemoryMB = [double](($hosts | Measure-Object -Property MemoryTotalMB -Sum).Sum)
        $totalCpuCores = [int](($hosts | Measure-Object -Property NumCpu -Sum).Sum)
        
        # Calculate N-2 usable capacity (remove 2 largest hosts)
        $hostResources = $hosts | Select-Object Name, CpuTotalMhz, MemoryTotalMB, NumCpu | Sort-Object CpuTotalMhz -Descending
        $twoLargestHosts = $hostResources | Select-Object -First 2
        
        $n2CpuMhz = [double]($totalCpuMhz - ($twoLargestHosts | Measure-Object -Property CpuTotalMhz -Sum).Sum)
        $n2MemoryMB = [double]($totalMemoryMB - ($twoLargestHosts | Measure-Object -Property MemoryTotalMB -Sum).Sum)
        $n2CpuCores = [int]($totalCpuCores - ($twoLargestHosts | Measure-Object -Property NumCpu -Sum).Sum)
        
        # Calculate N-2 usable CPU cores with overcommit
        $n2UsableCpuCores = [double]($n2CpuCores * $CpuOvercommitRatio)
        
        # Get vSAN datastore info if available
        $vSanDatastore = $cluster | Get-Datastore | Where-Object { $_.Type -eq "vsan" } | Select-Object -First 1
        $totalvSanGB = 0
        $n2vSanUsableGB = 0
        
        if ($vSanDatastore) {
            $totalvSanGB = [math]::Round($vSanDatastore.CapacityGB, 2)
            # For vSAN N-2, typically lose ~2 hosts worth of capacity
            # This is a simplified calculation - actual vSAN capacity depends on policy and configuration
            $avgStoragePerHost = $totalvSanGB / $totalHosts
            $n2vSanUsableGB = [math]::Round($totalvSanGB - (2 * $avgStoragePerHost), 2)
        }
        
        # Get all powered-on VMs in the cluster
        $vms = $cluster | Get-VM | Where-Object { $_.PowerState -eq "PoweredOn" }
        $totalVMs = [int]$vms.Count
        
        # Calculate VM resource demands (allocated resources) - convert to proper numeric types
        $allocatedCpuCores = [int](($vms | Measure-Object -Property NumCpu -Sum).Sum)
        $allocatedMemoryMB = [double](($vms | Measure-Object -Property MemoryMB -Sum).Sum)
        
        # Calculate vCPU to pCPU ratio
        $vCpuToPcpuRatio = [math]::Round([double]$allocatedCpuCores / [double]$totalCpuCores, 2)
        
        # Calculate N-2 utilization percentages based on cores
        $n2CpuUtilPct = if ($n2CpuCores -gt 0) { [math]::Round(([double]$allocatedCpuCores / [double]$n2CpuCores) * 100, 2) } else { 0 }
        $n2MemUtilPct = if ($n2MemoryMB -gt 0) { [math]::Round(($allocatedMemoryMB / $n2MemoryMB) * 100, 2) } else { 0 }
        
        # Create the cluster result object
        $clusterResult = @{
            vCenter = $vCenterName
            Cluster = [string]$cluster.Name
            TotalHosts = $totalHosts
            TotalVMs = $totalVMs
            pCPU_Total = $totalCpuCores
            vCPU_Assigned = $allocatedCpuCores
            vCpuToPcpuRatio = "$($vCpuToPcpuRatio):1"
            N2_CPU_Cores = $n2CpuCores
            N2_CPU_Usable = $n2UsableCpuCores
            N2_Memory_Total = [math]::Round($n2MemoryMB / 1024, 2)   # Convert to GB
            N2_Memory_Usable = [math]::Round($n2MemoryMB / 1024, 2)  # For memory, total = usable
            Total_vSAN = $totalvSanGB
            N2_vSAN_Usable = $n2vSanUsableGB
            N2_CPU_Util = "$($n2CpuUtilPct)%"
            N2_Memory_Util = "$($n2MemUtilPct)%"
        }
        
        $allResults += $clusterResult
    }
    
    # Sort results by vCenter and Cluster name
    $sortedResults = $allResults | Sort-Object { $_.vCenter }, { $_.Cluster }
    
    # Send email report if configured
    if ($SendEmail -and $sortedResults.Count -gt 0) {
        Write-Host "`nGenerating email report..." -ForegroundColor Green
        
        # Create HTML email content
        $htmlBody = @"
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #2E8B57; }
        h2 { color: #4682B4; margin-top: 30px; }
        h3 { color: #333; margin-top: 20px; }
        table { border-collapse: collapse; width: 100%; margin: 15px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; font-weight: bold; }
        .summary { background-color: #f5f5f5; padding: 10px; margin: 20px 0; }
        .small-text { font-size: 0.9em; }
    </style>
</head>
<body>
    <h1>VMware Cluster Capacity Analysis Report (N-2 Model)</h1>
    <p><strong>Generated:</strong> $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
    
    <div class="summary">
        <h3>Analysis Parameters</h3>
        <ul>
            <li>CPU Overcommit Ratio: $($CpuOvercommitRatio):1</li>
            <li>Capacity Model: N-2 (assumes 2 host failures)</li>
            <li>vSAN calculations are estimates based on average host capacity</li>
        </ul>
    </div>

    <h2>Cluster Summary (N-2 Usable Capacity)</h2>
    <table>
        <tr>
            <th>vCenter</th>
            <th>Cluster</th>
            <th>Total Hosts</th>
            <th>Total VMs</th>
            <th>vCPU:pCPU Ratio</th>
            <th class="small-text">N-2 CPU Cores<br>(Physical)</th>
            <th class="small-text">N-2 CPU Usable<br>(w/ 3:1 Overcommit)</th>
            <th class="small-text">N-2 Memory Total<br>(GB)</th>
            <th class="small-text">Total vSAN<br>(GB)</th>
            <th class="small-text">N-2 vSAN Usable<br>(GB)</th>
            <th class="small-text">N-2 CPU<br>Utilization</th>
            <th class="small-text">N-2 Memory<br>Utilization</th>
        </tr>
"@
        
        foreach ($result in $sortedResults) {
            $vSanTotalDisplay = if ($result.Total_vSAN -gt 0) { $result.Total_vSAN } else { "N/A" }
            $vSanUsableDisplay = if ($result.N2_vSAN_Usable -gt 0) { $result.N2_vSAN_Usable } else { "N/A" }
            
            $htmlBody += "<tr>"
            $htmlBody += "<td>$($result.vCenter)</td>"
            $htmlBody += "<td>$($result.Cluster)</td>"
            $htmlBody += "<td>$($result.TotalHosts)</td>"
            $htmlBody += "<td>$($result.TotalVMs)</td>"
            $htmlBody += "<td>$($result.vCpuToPcpuRatio)</td>"
            $htmlBody += "<td>$($result.N2_CPU_Cores)</td>"
            $htmlBody += "<td>$($result.N2_CPU_Usable)</td>"
            $htmlBody += "<td>$($result.N2_Memory_Total)</td>"
            $htmlBody += "<td>$vSanTotalDisplay</td>"
            $htmlBody += "<td>$vSanUsableDisplay</td>"
            $htmlBody += "<td>$($result.N2_CPU_Util)</td>"
            $htmlBody += "<td>$($result.N2_Memory_Util)</td>"
            $htmlBody += "</tr>"
        }
        
        $htmlBody += @"
    </table>

    <div class="summary">
        <h3>Notes</h3>
        <ul>
            <li>N-2 capacity assumes the two largest hosts in each cluster fail simultaneously</li>
            <li>CPU cores show physical cores available after N-2, with usable including $($CpuOvercommitRatio):1 overcommit ratio</li>
            <li>CPU utilization is based on allocated vCPU cores vs. physical N-2 CPU cores</li>
            <li>Total vSAN shows entire datastore capacity, N-2 vSAN usable is estimated capacity after 2 host failure</li>
            <li>vSAN usable capacity is estimated and may vary based on storage policies and configuration</li>
            <li>Memory utilization shows current workload against N-2 available memory</li>
        </ul>
    </div>

    <p><em>Report generated by VMware Capacity Analysis Script (N-2 Model)</em></p>
</body>
</html>
"@
        
        try {
            $emailParams = @{
                To = $EmailTo
                From = $EmailFrom
                Subject = $EmailSubject
                Body = $htmlBody
                BodyAsHtml = $true
                SmtpServer = $SMTPServer
                Port = $SMTPPort
                UseSsl = $UseSSL
            }
            
            Send-MailMessage @emailParams
            Write-Host "✓ Email report sent successfully to $EmailTo" -ForegroundColor Green
            
        } catch {
            Write-Host "✗ Failed to send email: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
} catch {
    Write-Error "Error: $($_.Exception.Message)"
} finally {
    # Disconnect from vCenter
    if ($global:DefaultVIServers) {
        Write-Host "`nDisconnecting from vCenter..." -ForegroundColor Green
        Disconnect-VIServer -Server * -Confirm:$false
    }
}

Write-Host "`nN-2 capacity analysis complete!" -ForegroundColor Green