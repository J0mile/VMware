# VMware Cluster Capacity Analysis Script
# Calculates how many hosts can be down before performance degradation

# Connection to multiple vCenter Servers
$vCenterServers = @(
    "vcenter1.domain.com",
    "vcenter2.domain.com", 
    "vcenter3.domain.com"
)

param(
    [Parameter(Mandatory=$false)]
    [PSCredential]$Credential
)

# Suppress certificate warnings (optional)
Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false -Scope Session

try {
    # Connect to multiple vCenter Servers
    Write-Host "Connecting to vCenter Servers:" -ForegroundColor Green
    $vCenterServers | ForEach-Object { Write-Host "  - '$_'" -ForegroundColor Gray }
    
    foreach ($vCenterServer in $vCenterServers) {
        Write-Host "`nConnecting to: $vCenterServer" -ForegroundColor Yellow
        try {
            if ($Credential) {
                Connect-VIServer -Server $vCenterServer -Credential $Credential -ErrorAction Stop
            } else {
                Connect-VIServer -Server $vCenterServer -ErrorAction Stop
            }
            Write-Host "  ✓ Connected successfully" -ForegroundColor Green
        } catch {
            Write-Host "  ✗ Failed to connect: $($_.Exception.Message)" -ForegroundColor Red
            continue
        }
    }

    # Get all clusters from all connected vCenter servers
    $clusters = Get-Cluster | Where-Object { $_.HAEnabled -eq $true }
    
    Write-Host "`nAnalyzing cluster capacity across all vCenter servers..." -ForegroundColor Yellow
    Write-Host "=" * 80
    
    foreach ($cluster in $clusters) {
        # Get the vCenter server this cluster belongs to
        $vCenterName = $cluster.Uid.Split('@')[1].Split(':')[0]
        
        Write-Host "`nvCenter: $vCenterName" -ForegroundColor Magenta
        Write-Host "Cluster: $($cluster.Name)" -ForegroundColor Cyan
        Write-Host "-" * 50
        
        # Get all hosts in cluster
        $hosts = $cluster | Get-VMHost | Where-Object { $_.ConnectionState -eq "Connected" }
        $totalHosts = $hosts.Count
        
        if ($totalHosts -lt 2) {
            Write-Host "  Insufficient hosts for analysis (need at least 2)" -ForegroundColor Red
            continue
        }
        
        # Calculate total cluster resources
        $totalCpuMhz = ($hosts | Measure-Object -Property CpuTotalMhz -Sum).Sum
        $totalMemoryMB = ($hosts | Measure-Object -Property MemoryTotalMB -Sum).Sum
        
        # Get VM resource usage (active/demand metrics)
        $vms = $cluster | Get-VM | Where-Object { $_.PowerState -eq "PoweredOn" }
        
        # Use current real-time stats instead of historical data for faster execution
        Write-Host "  Getting current resource utilization..." -ForegroundColor Gray
        
        # Get current CPU and Memory usage (much faster than historical stats)
        Write-Host "    - CPU statistics..." -ForegroundColor DarkGray
        $cpuStats = $vms | Get-Stat -Stat "cpu.usagemhz.average" -MaxSamples 1 -Realtime -ErrorAction SilentlyContinue
        $currentCpuDemand = if ($cpuStats) { 
            ($cpuStats | Measure-Object -Property Value -Sum).Sum
        } else { 
            # Fallback: estimate based on allocated vCPUs (conservative estimate)
            ($vms | Measure-Object -Property NumCpu -Sum).Sum * 1500  # Assume 1.5 GHz average per vCPU
        }
        
        Write-Host "    - Memory statistics..." -ForegroundColor DarkGray
        # Get Memory usage statistics (active memory) - current only
        $memStats = $vms | Get-Stat -Stat "mem.active.average" -MaxSamples 1 -Realtime -ErrorAction SilentlyContinue
        $currentMemDemand = if ($memStats) { 
            ($memStats | Measure-Object -Property Value -Sum).Sum / 1KB  # Convert to MB
        } else { 
            # Fallback: estimate based on allocated memory
            ($vms | Measure-Object -Property MemoryMB -Sum).Sum * 0.7  # Assume 70% active if no stats
        }
        

        
        # Performance thresholds (configurable)
        $cpuThreshold = 0.80  # 80% CPU utilization threshold
        $memThreshold = 0.85  # 85% Memory utilization threshold
        
        # Calculate available resources after threshold
        $availableCpuMhz = $totalCpuMhz * $cpuThreshold
        $availableMemoryMB = $totalMemoryMB * $memThreshold
        
        # Current utilization percentages
        $cpuUtilPct = [math]::Round(($currentCpuDemand / $totalCpuMhz) * 100, 2)
        $memUtilPct = [math]::Round(($currentMemDemand / $totalMemoryMB) * 100, 2)
        
        # Calculate maximum hosts that can be lost
        # This considers that remaining hosts must handle current workload within thresholds
        
        # CPU-based calculation
        $minHostsForCpu = [math]::Ceiling($currentCpuDemand / ($availableCpuMhz / $totalHosts))
        $maxHostsDownCpu = $totalHosts - $minHostsForCpu
        
        # Memory-based calculation  
        $minHostsForMem = [math]::Ceiling($currentMemDemand / ($availableMemoryMB / $totalHosts))
        $maxHostsDownMem = $totalHosts - $minHostsForMem
        
        # Most restrictive limit
        $maxHostsDown = [math]::Min($maxHostsDownCpu, $maxHostsDownMem)
        $limitingFactor = if ($maxHostsDownCpu -lt $maxHostsDownMem) { "CPU" } else { "Memory" }
        
        # HA slot calculation for additional context
        $haAdmissionControl = $cluster.HAAdmissionControlEnabled
        $haFailoverLevel = $cluster.HAFailoverLevel
        
        # Display results
        Write-Host "  Total Hosts: $totalHosts" -ForegroundColor White
        Write-Host "  Current CPU Demand: $([math]::Round($currentCpuDemand, 0)) MHz ($cpuUtilPct%)" -ForegroundColor White
        Write-Host "  Current Memory Demand: $([math]::Round($currentMemDemand, 0)) MB ($memUtilPct%)" -ForegroundColor White
        Write-Host "  Total CPU: $([math]::Round($totalCpuMhz, 0)) MHz" -ForegroundColor Gray
        Write-Host "  Total Memory: $([math]::Round($totalMemoryMB, 0)) MB" -ForegroundColor Gray
        
        Write-Host "`n  CAPACITY ANALYSIS:" -ForegroundColor Yellow
        Write-Host "  Max hosts you can lose: $maxHostsDown hosts" -ForegroundColor $(if ($maxHostsDown -gt 1) { "Green" } elseif ($maxHostsDown -eq 1) { "Yellow" } else { "Red" })
        Write-Host "  Limiting factor: $limitingFactor" -ForegroundColor White
        Write-Host "  Performance thresholds: CPU $($cpuThreshold*100)%, Memory $($memThreshold*100)%" -ForegroundColor Gray
        
        if ($haAdmissionControl) {
            Write-Host "  HA Failover Level: $haFailoverLevel" -ForegroundColor Cyan
            $haConstraint = [math]::Max(0, $totalHosts - $haFailoverLevel - 1)
            if ($haConstraint -lt $maxHostsDown) {
                Write-Host "  HA Admission Control limits you to: $haConstraint hosts down" -ForegroundColor Red
            }
        }
        
        # Warnings
        if ($maxHostsDown -le 0) {
            Write-Host "  WARNING: Cluster is already at or over capacity!" -ForegroundColor Red
        } elseif ($maxHostsDown -eq 1) {
            Write-Host "  CAUTION: Limited redundancy available" -ForegroundColor Yellow
        }
        
        Write-Host ""
    }
    
} catch {
    Write-Error "Error: $($_.Exception.Message)"
} finally {
    # Disconnect from vCenter
    if ($global:DefaultVIServers) {
        Write-Host "`nDisconnecting from vCenter..." -ForegroundColor Green
        Disconnect-VIServer -Server * -Confirm:$false
    }
}

Write-Host "`nCapacity analysis complete!" -ForegroundColor Green
