# VMware Cluster Capacity Analysis Script - Simplified Approach
# Calculates how many hosts can be down before performance degradation

# Connection to multiple vCenter Servers
$vCenterServers = @(
    "vcenter1.domain.com",
    "vcenter2.domain.com", 
    "vcenter3.domain.com"
)

# Configuration - Modify these values as needed
$CpuOvercommitRatio = 2.0             # How much you typically overcommit CPU (2:1 is common)
$MemoryBufferPct = 0.15               # 15% memory buffer for performance
$CpuThresholdPct = 0.80               # 80% CPU threshold before performance issues

# Email Configuration
$SendEmail = $true                     # Set to $false to disable email
$EmailTo = "admin@company.com"         # Recipient email
$EmailFrom = "vmware-reports@company.com" # Sender email
$EmailSubject = "VMware Cluster Capacity Analysis - $(Get-Date -Format 'yyyy-MM-dd')"
$SMTPServer = "mail.company.com"       # Your SMTP server
$SMTPPort = 587                        # SMTP port (587 for TLS, 25 for unencrypted)
$SMTPCredentials = $null               # Set to Get-Credential if SMTP requires authentication

# Get credentials once at the start
Write-Host "Please enter your vCenter credentials:" -ForegroundColor Yellow
$Credential = Get-Credential

# Suppress certificate warnings (optional)
Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false -Scope Session

try {
    # Connect to vCenter Servers
    Write-Host "Connecting to vCenter Servers:" -ForegroundColor Green
    
    foreach ($server in $vCenterServers) {
        if (-not [string]::IsNullOrWhiteSpace($server)) {
            $cleanServer = $server.Trim()
            if ($cleanServer -ne "") {
                Write-Host "  Attempting connection to: $cleanServer" -ForegroundColor Cyan
                try {
                    Connect-VIServer -Server $cleanServer -Credential $Credential -ErrorAction Stop
                    Write-Host "    ✓ Connected successfully" -ForegroundColor Green
                } catch {
                    Write-Host "    ✗ Failed to connect: $($_.Exception.Message)" -ForegroundColor Red
                    continue
                }
            }
        }
    }

    # Get all clusters from all connected vCenter servers
    $clusters = Get-Cluster | Where-Object { $_.HAEnabled -eq $true }
    
    # Initialize results collection for email
    $emailResults = @()
    $summaryTable = @()
    
    Write-Host "`nAnalyzing cluster capacity across all vCenter servers..." -ForegroundColor Yellow
    Write-Host "=" * 80
    
    foreach ($cluster in $clusters) {
        # Get the vCenter server this cluster belongs to
        $vCenterName = $cluster.Uid.Split('@')[1].Split(':')[0]
        
        Write-Host "`nvCenter: $vCenterName" -ForegroundColor Magenta
        Write-Host "Cluster: $($cluster.Name)" -ForegroundColor Cyan
        Write-Host "-" * 50
        
        # Get all connected hosts in cluster
        $hosts = $cluster | Get-VMHost | Where-Object { $_.ConnectionState -eq "Connected" -and $_.PowerState -eq "PoweredOn" }
        $totalHosts = $hosts.Count
        
        if ($totalHosts -lt 2) {
            Write-Host "  Insufficient hosts for analysis (need at least 2)" -ForegroundColor Red
            continue
        }
        
        # Calculate total cluster resources
        $totalCpuMhz = ($hosts | Measure-Object -Property CpuTotalMhz -Sum).Sum
        $totalMemoryMB = ($hosts | Measure-Object -Property MemoryTotalMB -Sum).Sum
        $totalCpuCores = ($hosts | Measure-Object -Property NumCpu -Sum).Sum
        
        # Get all powered-on VMs in the cluster
        Write-Host "  Analyzing VM resource allocation..." -ForegroundColor Gray
        $vms = $cluster | Get-VM | Where-Object { $_.PowerState -eq "PoweredOn" }
        $totalVMs = $vms.Count
        
        # Calculate VM resource demands (allocated resources)
        $allocatedCpuCores = ($vms | Measure-Object -Property NumCpu -Sum).Sum
        $allocatedMemoryMB = ($vms | Measure-Object -Property MemoryMB -Sum).Sum
        
        # Estimate actual CPU demand (accounting for typical overcommit)
        $estimatedCpuDemandMhz = ($allocatedCpuCores * ($totalCpuMhz / $totalCpuCores)) / $CpuOvercommitRatio
        
        # Memory demand (VMs typically use most of their allocated memory)
        $estimatedMemoryDemandMB = $allocatedMemoryMB * (1 - $MemoryBufferPct)
        
        # Calculate current utilization percentages
        $currentCpuUtilPct = [math]::Round(($estimatedCpuDemandMhz / $totalCpuMhz) * 100, 2)
        $currentMemUtilPct = [math]::Round(($estimatedMemoryDemandMB / $totalMemoryMB) * 100, 2)
        
        # Calculate how much capacity we need per host (average)
        $avgCpuPerHost = $totalCpuMhz / $totalHosts
        $avgMemoryPerHost = $totalMemoryMB / $totalHosts
        
        # Calculate minimum hosts needed to handle current workload within thresholds
        $minHostsForCpu = [math]::Ceiling($estimatedCpuDemandMhz / ($avgCpuPerHost * $CpuThresholdPct))
        $minHostsForMemory = [math]::Ceiling($estimatedMemoryDemandMB / ($avgMemoryPerHost * (1 - $MemoryBufferPct)))
        
        # Most restrictive requirement
        $minHostsNeeded = [math]::Max($minHostsForCpu, $minHostsForMemory)
        $maxHostsCanLose = [math]::Max(0, $totalHosts - $minHostsNeeded)
        
        # Determine limiting factor
        $limitingFactor = if ($minHostsForCpu -gt $minHostsForMemory) { "CPU" } else { "Memory" }
        
        # HA considerations
        $haFailoverHosts = if ($cluster.HAAdmissionControlEnabled) { $cluster.HAFailoverLevel } else { 0 }
        
        # Calculate effective capacity per host failure
        Write-Host "  Calculating failure scenarios..." -ForegroundColor Gray
        $capacityTable = @()
        
        for ($hostsDown = 0; $hostsDown -le [math]::Min(3, $totalHosts - 1); $hostsDown++) {
            $remainingHosts = $totalHosts - $hostsDown
            $remainingCpuMhz = $remainingHosts * $avgCpuPerHost
            $remainingMemoryMB = $remainingHosts * $avgMemoryPerHost
            
            $cpuUtilAfterFailure = [math]::Round(($estimatedCpuDemandMhz / $remainingCpuMhz) * 100, 2)
            $memUtilAfterFailure = [math]::Round(($estimatedMemoryDemandMB / $remainingMemoryMB) * 100, 2)
            
            # Performance risk assessment
            $status = "OK"
            $riskLevel = "Low"
            
            # Determine performance risk based on multiple factors
            if ($cpuUtilAfterFailure -gt ($CpuThresholdPct * 100)) {
                $status = "CPU PERFORMANCE RISK"
                $riskLevel = "High"
            }
            if ($memUtilAfterFailure -gt ((1 - $MemoryBufferPct) * 100)) {
                $status = if ($status -eq "OK") { "MEMORY PERFORMANCE RISK" } else { "CPU & MEMORY RISK" }
                $riskLevel = "High"
            }
            
            # Additional risk factors based on overcommit ratio
            $vCpuToPcpuRatio = $allocatedCpuCores / $totalCpuCores
            if ($vCpuToPcpuRatio -gt $CpuOvercommitRatio -and $cpuUtilAfterFailure -gt 60) {
                $riskLevel = "Very High"
                $status += " (HIGH OVERCOMMIT)"
            }
            
            $capacityTable += [PSCustomObject]@{
                HostsDown = $hostsDown
                RemainingHosts = $remainingHosts
                CPUUtil = "$cpuUtilAfterFailure%"
                MemoryUtil = "$memUtilAfterFailure%"
                Status = $status
                RiskLevel = $riskLevel
            }
        }
        
        # Display results
        Write-Host "`n  CLUSTER SUMMARY:" -ForegroundColor White
        Write-Host "  Total Hosts: $totalHosts" -ForegroundColor White
        Write-Host "  Total VMs: $totalVMs" -ForegroundColor White
        Write-Host "  Total CPU: $([math]::Round($totalCpuMhz/1000, 1)) GHz ($totalCpuCores cores)" -ForegroundColor Gray
        Write-Host "  Total Memory: $([math]::Round($totalMemoryMB/1024, 1)) GB" -ForegroundColor Gray
        
        Write-Host "`n  CURRENT UTILIZATION (Estimated):" -ForegroundColor White
        Write-Host "  CPU Demand: $([math]::Round($estimatedCpuDemandMhz/1000, 1)) GHz ($currentCpuUtilPct%)" -ForegroundColor White
        Write-Host "  Memory Demand: $([math]::Round($estimatedMemoryDemandMB/1024, 1)) GB ($currentMemUtilPct%)" -ForegroundColor White
        Write-Host "  vCPU:pCPU Ratio: $([math]::Round($allocatedCpuCores / $totalCpuCores, 2)):1" -ForegroundColor Gray
        
        Write-Host "`n  CAPACITY ANALYSIS:" -ForegroundColor Yellow
        Write-Host "  Max hosts you can lose: $maxHostsCanLose hosts" -ForegroundColor $(
            if ($maxHostsCanLose -gt 2) { "Green" } 
            elseif ($maxHostsCanLose -ge 1) { "Yellow" } 
            else { "Red" }
        )
        Write-Host "  Limiting factor: $limitingFactor" -ForegroundColor White
        Write-Host "  Min hosts needed: $minHostsNeeded (for performance thresholds)" -ForegroundColor Gray
        
        if ($haFailoverHosts -gt 0) {
            $haConstraint = [math]::Max(0, $totalHosts - $haFailoverHosts - 1)
            Write-Host "  HA Failover Level: $haFailoverHosts hosts" -ForegroundColor Cyan
            if ($haConstraint -lt $maxHostsCanLose) {
                Write-Host "  HA limits you to: $haConstraint hosts down" -ForegroundColor Yellow
                $maxHostsCanLose = $haConstraint
            }
        }
        
        Write-Host "`n  FAILURE IMPACT ANALYSIS:" -ForegroundColor Yellow
        $capacityTable | Format-Table -AutoSize
        
        # Add to email results collection
        $summaryTable += [PSCustomObject]@{
            vCenter = $vCenterName
            Cluster = $cluster.Name
            TotalHosts = $totalHosts
            TotalVMs = $totalVMs
            CurrentCPU = "$currentCpuUtilPct%"
            CurrentMemory = "$currentMemUtilPct%"
            vCpuToPcpu = "$([math]::Round($allocatedCpuCores / $totalCpuCores, 2)):1"
            MaxHostsDown = $maxHostsCanLose
            LimitingFactor = $limitingFactor
            OverallRisk = if ($maxHostsCanLose -le 0) { "Critical" } elseif ($maxHostsCanLose -eq 1) { "High" } elseif ($currentCpuUtilPct -gt 70 -or $currentMemUtilPct -gt 80) { "Medium" } else { "Low" }
        }
        
        # Add detailed failure scenarios to email results
        foreach ($scenario in $capacityTable) {
            $emailResults += [PSCustomObject]@{
                vCenter = $vCenterName
                Cluster = $cluster.Name
                HostsDown = $scenario.HostsDown
                RemainingHosts = $scenario.RemainingHosts
                CPUUtilization = $scenario.CPUUtil
                MemoryUtilization = $scenario.MemoryUtil
                Status = $scenario.Status
                RiskLevel = $scenario.RiskLevel
            }
        }
        Write-Host "  RECOMMENDATIONS:" -ForegroundColor Cyan
        if ($maxHostsCanLose -le 0) {
            Write-Host "  ⚠️  CRITICAL: Cluster is at or over capacity!" -ForegroundColor Red
            Write-Host "      - Consider adding hosts or migrating VMs" -ForegroundColor Red
        } elseif ($maxHostsCanLose -eq 1) {
            Write-Host "  ⚠️  CAUTION: Limited redundancy available" -ForegroundColor Yellow
            Write-Host "      - Single host failure will impact performance" -ForegroundColor Yellow
        } else {
            Write-Host "  ✅ Good redundancy: Can handle $maxHostsCanLose host failures" -ForegroundColor Green
        }
        
        if ($currentCpuUtilPct -gt 60) {
            Write-Host "  💡 Consider CPU optimization or additional hosts" -ForegroundColor Cyan
        }
        if ($currentMemUtilPct -gt 75) {
            Write-Host "  💡 Memory utilization is high - monitor closely" -ForegroundColor Cyan
        }
        
        Write-Host ""
    }
    
} catch {
    Write-Error "Error: $($_.Exception.Message)"
} finally {
    # Disconnect from vCenter
    if ($global:DefaultVIServers) {
        Write-Host "`nDisconnecting from vCenter..." -ForegroundColor Green
        Disconnect-VIServer -Server * -Confirm:$false
    }
}

Write-Host "`nCapacity analysis complete!" -ForegroundColor Green
Write-Host "`nNote: Analysis based on allocated resources and typical overcommit ratios." -ForegroundColor Gray
Write-Host "For more precise results, monitor actual performance during peak hours." -ForegroundColor Gray
