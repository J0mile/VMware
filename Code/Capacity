# VMware Cluster Capacity Analysis Script - Email Only Version
# Calculates how many hosts can be down before performance degradation

# Connection to multiple vCenter Servers
$vCenterServers = @(
    "vcenter1.domain.com",
    "vcenter2.domain.com", 
    "vcenter3.domain.com"
)

# Configuration - Modify these values as needed
$CpuOvercommitRatio = 2.0             # How much you typically overcommit CPU (2:1 is common)
$MemoryBufferPct = 0.15               # 15% memory buffer for performance
$CpuThresholdPct = 0.80               # 80% CPU threshold before performance issues

# Email Configuration
$SendEmail = $true                     # Set to $false to disable email
$EmailTo = "admin@company.com"         # Recipient email
$EmailFrom = "vmware-reports@company.com" # Sender email
$EmailSubject = "VMware Cluster Capacity Analysis - $(Get-Date -Format 'yyyy-MM-dd')"
$SMTPServer = "mail.company.com"       # Your SMTP server
$SMTPPort = 465                        # SSL port (465 for SSL, 587 for TLS)
$UseSSL = $true                        # Use SSL encryption
$SMTPCredentials = $null               # No SMTP authentication required

# Get credentials once at the start
Write-Host "Please enter your vCenter credentials:" -ForegroundColor Yellow
$Credential = Get-Credential

# Suppress certificate warnings (optional)
Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:$false -Scope Session

try {
    # Connect to vCenter Servers
    Write-Host "Connecting to vCenter Servers:" -ForegroundColor Green
    
    foreach ($server in $vCenterServers) {
        if (-not [string]::IsNullOrWhiteSpace($server)) {
            $cleanServer = $server.Trim()
            if ($cleanServer -ne "") {
                Write-Host "  Attempting connection to: $cleanServer" -ForegroundColor Cyan
                try {
                    Connect-VIServer -Server $cleanServer -Credential $Credential -ErrorAction Stop
                    Write-Host "    ✓ Connected successfully" -ForegroundColor Green
                } catch {
                    Write-Host "    ✗ Failed to connect: $($_.Exception.Message)" -ForegroundColor Red
                    continue
                }
            }
        }
    }

    # Get all clusters from all connected vCenter servers
    $clusters = Get-Cluster | Where-Object { $_.HAEnabled -eq $true }
    
    # Initialize results collection for email
    $allResults = @()
    
    Write-Host "`nAnalyzing cluster capacity across all vCenter servers..." -ForegroundColor Yellow
    
    foreach ($cluster in $clusters) {
        # Get the vCenter server this cluster belongs to
        $vCenterName = [string]($cluster.Uid.Split('@')[1].Split(':')[0])
        
        Write-Host "Processing vCenter: $vCenterName, Cluster: $($cluster.Name)" -ForegroundColor Cyan
        
        # Get all connected hosts in cluster
        $hosts = $cluster | Get-VMHost | Where-Object { $_.ConnectionState -eq "Connected" -and $_.PowerState -eq "PoweredOn" }
        $totalHosts = [int]$hosts.Count
        
        if ($totalHosts -lt 2) {
            Write-Host "  Insufficient hosts for analysis (need at least 2)" -ForegroundColor Yellow
            continue
        }
        
        # Calculate total cluster resources - convert to proper numeric types
        $totalCpuMhz = [double](($hosts | Measure-Object -Property CpuTotalMhz -Sum).Sum)
        $totalMemoryMB = [double](($hosts | Measure-Object -Property MemoryTotalMB -Sum).Sum)
        $totalCpuCores = [int](($hosts | Measure-Object -Property NumCpu -Sum).Sum)
        
        # Get all powered-on VMs in the cluster
        $vms = $cluster | Get-VM | Where-Object { $_.PowerState -eq "PoweredOn" }
        $totalVMs = [int]$vms.Count
        
        # Calculate VM resource demands (allocated resources) - convert to proper numeric types
        $allocatedCpuCores = [int](($vms | Measure-Object -Property NumCpu -Sum).Sum)
        $allocatedMemoryMB = [double](($vms | Measure-Object -Property MemoryMB -Sum).Sum)
        
        # Estimate actual CPU demand (accounting for typical overcommit)
        $estimatedCpuDemandMhz = [double](($allocatedCpuCores * ($totalCpuMhz / $totalCpuCores)) / $CpuOvercommitRatio)
        
        # Memory demand (VMs typically use most of their allocated memory)
        $estimatedMemoryDemandMB = [double]($allocatedMemoryMB * (1 - $MemoryBufferPct))
        
        # Calculate current utilization percentages
        $currentCpuUtilPct = [math]::Round(($estimatedCpuDemandMhz / $totalCpuMhz) * 100, 2)
        $currentMemUtilPct = [math]::Round(($estimatedMemoryDemandMB / $totalMemoryMB) * 100, 2)
        
        # Calculate how much capacity we need per host (average)
        $avgCpuPerHost = [double]($totalCpuMhz / $totalHosts)
        $avgMemoryPerHost = [double]($totalMemoryMB / $totalHosts)
        
        # Calculate vCPU to pCPU ratio
        $vCpuToPcpuRatio = [math]::Round([double]$allocatedCpuCores / [double]$totalCpuCores, 2)
        
        # Calculate minimum hosts needed to handle current workload within thresholds
        $minHostsForCpu = [math]::Ceiling($estimatedCpuDemandMhz / ($avgCpuPerHost * $CpuThresholdPct))
        $minHostsForMemory = [math]::Ceiling($estimatedMemoryDemandMB / ($avgMemoryPerHost * (1 - $MemoryBufferPct)))
        
        # Most restrictive requirement
        $minHostsNeeded = [math]::Max($minHostsForCpu, $minHostsForMemory)
        $maxHostsCanLose = [math]::Max(0, $totalHosts - $minHostsNeeded)
        
        # HA considerations
        $haFailoverHosts = if ($cluster.HAAdmissionControlEnabled) { [int]$cluster.HAFailoverLevel } else { 0 }
        if ($haFailoverHosts -gt 0) {
            $haConstraint = [math]::Max(0, $totalHosts - $haFailoverHosts - 1)
            if ($haConstraint -lt $maxHostsCanLose) {
                $maxHostsCanLose = $haConstraint
            }
        }
        
        # Create the main cluster result object
        $clusterResult = @{
            vCenter = $vCenterName
            Cluster = [string]$cluster.Name
            TotalHosts = $totalHosts
            TotalVMs = $totalVMs
            pCPU = $totalCpuCores
            vCPU = $allocatedCpuCores
            vCpuToPcpuRatio = "$($vCpuToPcpuRatio):1"
            CurrentCPU = "$($currentCpuUtilPct)%"
            CurrentMemory = "$($currentMemUtilPct)%"
            MaxHostsDown = $maxHostsCanLose
            HostsDownMessage = if ($maxHostsCanLose -eq 0) { "No hosts can fail" } 
                              elseif ($maxHostsCanLose -eq 1) { "1 host can fail" } 
                              else { "$maxHostsCanLose hosts can fail" }
            FailureScenarios = @()
        }
        
        # Calculate failure scenarios for up to 2 hosts down
        for ($hostsDown = 0; $hostsDown -le [math]::Min(2, $totalHosts - 1); $hostsDown++) {
            $remainingHosts = [int]($totalHosts - $hostsDown)
            $remainingCpuMhz = [double]($remainingHosts * $avgCpuPerHost)
            $remainingMemoryMB = [double]($remainingHosts * $avgMemoryPerHost)
            
            $cpuUtilAfterFailure = [math]::Round(($estimatedCpuDemandMhz / $remainingCpuMhz) * 100, 2)
            $memUtilAfterFailure = [math]::Round(($estimatedMemoryDemandMB / $remainingMemoryMB) * 100, 2)
            
            # Performance risk assessment
            $status = "OK"
            if ($cpuUtilAfterFailure -gt ($CpuThresholdPct * 100)) {
                $status = "CPU PERFORMANCE RISK"
            }
            if ($memUtilAfterFailure -gt ((1 - $MemoryBufferPct) * 100)) {
                $status = if ($status -eq "OK") { "MEMORY PERFORMANCE RISK" } else { "CPU & MEMORY RISK" }
            }
            
            $scenario = @{
                HostsDown = $hostsDown
                RemainingHosts = $remainingHosts
                CPUUtilization = "$($cpuUtilAfterFailure)%"
                MemoryUtilization = "$($memUtilAfterFailure)%"
                Status = $status
            }
            
            $clusterResult.FailureScenarios += $scenario
        }
        
        $allResults += $clusterResult
    }
    
    # Sort results by vCenter and Cluster name
    $sortedResults = $allResults | Sort-Object { $_.vCenter }, { $_.Cluster }
    
    # Send email report if configured
    if ($SendEmail -and $sortedResults.Count -gt 0) {
        Write-Host "`nGenerating email report..." -ForegroundColor Green
        
        # Create HTML email content
        $htmlBody = @"
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #2E8B57; }
        h2 { color: #4682B4; margin-top: 30px; }
        h3 { color: #333; margin-top: 20px; }
        table { border-collapse: collapse; width: 100%; margin: 15px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; font-weight: bold; }
        .summary { background-color: #f5f5f5; padding: 10px; margin: 20px 0; }
        .cluster-detail { margin-bottom: 30px; }
    </style>
</head>
<body>
    <h1>VMware Cluster Capacity Analysis Report</h1>
    <p><strong>Generated:</strong> $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
    
    <div class="summary">
        <h3>Analysis Parameters</h3>
        <ul>
            <li>CPU Overcommit Ratio: $($CpuOvercommitRatio):1</li>
            <li>CPU Threshold: $($CpuThresholdPct * 100)%</li>
            <li>Memory Buffer: $($MemoryBufferPct * 100)%</li>
        </ul>
    </div>

    <h2>Cluster Summary</h2>
    <table>
        <tr>
            <th>vCenter</th>
            <th>Cluster</th>
            <th>Total Hosts</th>
            <th>Total VMs</th>
            <th>pCPU Cores</th>
            <th>vCPU Assigned</th>
            <th>vCPU:pCPU Ratio</th>
            <th>Current CPU</th>
            <th>Current Memory</th>
            <th>Host Failure Capacity</th>
        </tr>
"@
        
        foreach ($result in $sortedResults) {
            $htmlBody += "<tr>"
            $htmlBody += "<td>$($result.vCenter)</td>"
            $htmlBody += "<td>$($result.Cluster)</td>"
            $htmlBody += "<td>$($result.TotalHosts)</td>"
            $htmlBody += "<td>$($result.TotalVMs)</td>"
            $htmlBody += "<td>$($result.pCPU)</td>"
            $htmlBody += "<td>$($result.vCPU)</td>"
            $htmlBody += "<td>$($result.vCpuToPcpuRatio)</td>"
            $htmlBody += "<td>$($result.CurrentCPU)</td>"
            $htmlBody += "<td>$($result.CurrentMemory)</td>"
            $htmlBody += "<td>$($result.HostsDownMessage)</td>"
            $htmlBody += "</tr>"
        }
        
        $htmlBody += @"
    </table>

    <h2>Detailed Failure Scenarios by Cluster</h2>
"@
        
        # Add detailed scenarios for each cluster
        foreach ($result in $sortedResults) {
            $clusterDisplayName = "$($result.vCenter) - $($result.Cluster)"
            
            $htmlBody += @"
    <div class="cluster-detail">
        <h3>$clusterDisplayName</h3>
        <table>
            <tr>
                <th>Hosts Down</th>
                <th>Remaining Hosts</th>
                <th>CPU Utilization</th>
                <th>Memory Utilization</th>
                <th>Status</th>
            </tr>
"@
            
            foreach ($scenario in $result.FailureScenarios) {
                $htmlBody += "<tr>"
                $htmlBody += "<td>$($scenario.HostsDown)</td>"
                $htmlBody += "<td>$($scenario.RemainingHosts)</td>"
                $htmlBody += "<td>$($scenario.CPUUtilization)</td>"
                $htmlBody += "<td>$($scenario.MemoryUtilization)</td>"
                $htmlBody += "<td>$($scenario.Status)</td>"
                $htmlBody += "</tr>"
            }
            
            $htmlBody += "</table></div>"
        }
        
        $htmlBody += @"

    <p><em>Report generated by VMware Capacity Analysis Script</em></p>
</body>
</html>
"@
        
        try {
            $emailParams = @{
                To = $EmailTo
                From = $EmailFrom
                Subject = $EmailSubject
                Body = $htmlBody
                BodyAsHtml = $true
                SmtpServer = $SMTPServer
                Port = $SMTPPort
                UseSsl = $UseSSL
            }
            
            Send-MailMessage @emailParams
            Write-Host "✓ Email report sent successfully to $EmailTo" -ForegroundColor Green
            
        } catch {
            Write-Host "✗ Failed to send email: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
} catch {
    Write-Error "Error: $($_.Exception.Message)"
} finally {
    # Disconnect from vCenter
    if ($global:DefaultVIServers) {
        Write-Host "`nDisconnecting from vCenter..." -ForegroundColor Green
        Disconnect-VIServer -Server * -Confirm:$false
    }
}

Write-Host "`nCapacity analysis complete!" -ForegroundColor Green
