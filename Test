# VMware ESXi SSH Key Setup Script
# Handles fingerprint acceptance and key generation/upload

# Function to generate SSH key pair if it doesn't exist
function New-SSHKeyPair {
    param(
        [string]$KeyPath = "$env:USERPROFILE\.ssh\id_rsa"
    )
    
    if (-not (Test-Path $KeyPath)) {
        Write-Host "Generating SSH key pair..." -ForegroundColor Green
        ssh-keygen -t rsa -b 4096 -f $KeyPath -N '""' -q
        Write-Host "SSH key pair generated at $KeyPath" -ForegroundColor Green
    } else {
        Write-Host "SSH key pair already exists at $KeyPath" -ForegroundColor Yellow
    }
}

# Function to add host to known_hosts (bypasses fingerprint prompt)
function Add-HostToKnownHosts {
    param(
        [string]$HostName,
        [string]$KnownHostsPath = "$env:USERPROFILE\.ssh\known_hosts"
    )
    
    # Create .ssh directory if it doesn't exist
    $sshDir = Split-Path $KnownHostsPath -Parent
    if (-not (Test-Path $sshDir)) {
        New-Item -ItemType Directory -Path $sshDir -Force | Out-Null
    }
    
    # Get host key and add to known_hosts
    try {
        Write-Host "Adding $HostName to known_hosts..." -ForegroundColor Green
        $hostKey = ssh-keyscan -H $HostName 2>$null
        if ($hostKey) {
            Add-Content -Path $KnownHostsPath -Value $hostKey
            Write-Host "Host key added successfully" -ForegroundColor Green
        }
    }
    catch {
        Write-Warning "Failed to get host key for $HostName : $($_.Exception.Message)"
    }
}

# Function to upload public key to ESXi host
function Install-SSHKeyToESXi {
    param(
        [string]$ESXiHost,
        [string]$Username = "root",
        [string]$Password,
        [string]$PublicKeyPath = "$env:USERPROFILE\.ssh\id_rsa.pub"
    )
    
    if (-not (Test-Path $PublicKeyPath)) {
        throw "Public key not found at $PublicKeyPath"
    }
    
    $publicKeyContent = Get-Content $PublicKeyPath -Raw
    $publicKeyContent = $publicKeyContent.Trim()
    
    Write-Host "Installing SSH key to $ESXiHost..." -ForegroundColor Green
    
    # Method 1: Using sshpass (if available) - most reliable
    if (Get-Command sshpass -ErrorAction SilentlyContinue) {
        try {
            # Create authorized_keys directory and file
            $commands = @(
                "mkdir -p /etc/ssh/keys-root",
                "echo '$publicKeyContent' >> /etc/ssh/keys-root/authorized_keys",
                "chmod 600 /etc/ssh/keys-root/authorized_keys",
                "chmod 700 /etc/ssh/keys-root"
            )
            
            foreach ($cmd in $commands) {
                sshpass -p $Password ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $Username@$ESXiHost $cmd
            }
            Write-Host "SSH key installed successfully on $ESXiHost" -ForegroundColor Green
            return $true
        }
        catch {
            Write-Warning "Failed to install SSH key using sshpass: $($_.Exception.Message)"
        }
    }
    
    # Method 2: Using Expect script (if on Linux/WSL)
    if ($IsLinux -or $env:WSL_DISTRO_NAME) {
        try {
            $expectScript = @"
#!/usr/bin/expect -f
set timeout 30
spawn ssh -o StrictHostKeyChecking=no $Username@$ESXiHost
expect "password:"
send "$Password\r"
expect "~]# "
send "mkdir -p /etc/ssh/keys-root\r"
expect "~]# "
send "echo '$publicKeyContent' >> /etc/ssh/keys-root/authorized_keys\r"
expect "~]# "
send "chmod 600 /etc/ssh/keys-root/authorized_keys\r"
expect "~]# "
send "chmod 700 /etc/ssh/keys-root\r"
expect "~]# "
send "exit\r"
expect eof
"@
            $expectScript | Out-File -FilePath "/tmp/ssh_key_install.exp" -Encoding UTF8
            chmod +x /tmp/ssh_key_install.exp
            expect /tmp/ssh_key_install.exp
            Remove-Item "/tmp/ssh_key_install.exp" -Force
            Write-Host "SSH key installed successfully on $ESXiHost" -ForegroundColor Green
            return $true
        }
        catch {
            Write-Warning "Failed to install SSH key using expect: $($_.Exception.Message)"
        }
    }
    
    # Method 3: Using native Windows ssh.exe with password input via stdin
    if (Get-Command ssh -ErrorAction SilentlyContinue) {
        try {
            Write-Host "Using native Windows SSH client..." -ForegroundColor Yellow
            
            # Create a temporary script to handle password input
            $tempScript = @"
@echo off
echo $Password
"@
            $tempBatFile = [System.IO.Path]::GetTempFileName() + ".bat"
            $tempScript | Out-File -FilePath $tempBatFile -Encoding ASCII
            
            # Commands to execute on ESXi
            $commands = @(
                "mkdir -p /etc/ssh/keys-root",
                "echo '$publicKeyContent' >> /etc/ssh/keys-root/authorized_keys", 
                "chmod 600 /etc/ssh/keys-root/authorized_keys",
                "chmod 700 /etc/ssh/keys-root"
            )
            
            # Execute each command
            foreach ($cmd in $commands) {
                $sshCommand = "echo `"$Password`" | ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=nul -o PreferredAuthentications=password -o PubkeyAuthentication=no $Username@$ESXiHost `"$cmd`""
                $result = cmd /c $sshCommand 2>&1
                
                if ($LASTEXITCODE -ne 0) {
                    Write-Warning "Command may have failed: $cmd"
                }
            }
            
            # Clean up temp file
            if (Test-Path $tempBatFile) {
                Remove-Item $tempBatFile -Force
            }
            
            Write-Host "SSH key installation attempted using native SSH" -ForegroundColor Green
            return $true
        }
        catch {
            Write-Warning "Failed using native SSH: $($_.Exception.Message)"
        }
    }
    
    # Method 4: Using plink.exe (PuTTY)
    if (Get-Command plink -ErrorAction SilentlyContinue) {
        try {
            Write-Host "Using plink.exe..." -ForegroundColor Yellow
            
            # Commands to execute
            $commands = @(
                "mkdir -p /etc/ssh/keys-root",
                "echo '$publicKeyContent' >> /etc/ssh/keys-root/authorized_keys",
                "chmod 600 /etc/ssh/keys-root/authorized_keys", 
                "chmod 700 /etc/ssh/keys-root"
            )
            
            foreach ($cmd in $commands) {
                # Use plink with auto-accept host key and password
                $plinkArgs = @(
                    "-ssh",
                    "-batch",
                    "-pw", $Password,
                    "$Username@$ESXiHost",
                    $cmd
                )
                
                $result = & plink @plinkArgs 2>&1
                
                if ($LASTEXITCODE -ne 0) {
                    Write-Warning "Plink command may have failed: $cmd - $result"
                }
            }
            
            Write-Host "SSH key installed successfully using plink" -ForegroundColor Green
            return $true
        }
        catch {
            Write-Warning "Failed using plink: $($_.Exception.Message)"
        }
    }
    
# Function using plink without batch mode for initial connection
function Install-SSHKeyToESXi-PlinkInteractive {
    param(
        [string]$ESXiHost,
        [string]$Username = "root",
        [string]$Password,
        [string]$PublicKeyPath = "$env:USERPROFILE\.ssh\id_rsa.pub"
    )
    
    if (-not (Test-Path $PublicKeyPath)) {
        throw "Public key not found at $PublicKeyPath"
    }
    
    $publicKeyContent = Get-Content $PublicKeyPath -Raw
    $publicKeyContent = $publicKeyContent.Trim()
    
    Write-Host "Installing SSH key to $ESXiHost using plink..." -ForegroundColor Green
    
    # Method 1: Use plink without -batch for password auth, then switch to batch for commands
    try {
        Write-Host "Establishing initial connection..." -ForegroundColor Yellow
        
        # First establish connection and accept host key (interactive)
        $plinkArgs = @(
            "-ssh",
            "-pw", $Password,
            "$Username@$ESXiHost",
            "echo 'Initial connection successful'"
        )
        
        Write-Host "Running: plink -ssh -pw [PASSWORD] $Username@$ESXiHost" -ForegroundColor Gray
        $result = & plink @plinkArgs 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "Initial connection established, installing SSH key..." -ForegroundColor Green
            
            # Now use batch mode for commands since host key is cached
            $commands = @(
                "mkdir -p /etc/ssh/keys-root",
                "echo '$publicKeyContent' >> /etc/ssh/keys-root/authorized_keys",
                "chmod 600 /etc/ssh/keys-root/authorized_keys",
                "chmod 700 /etc/ssh/keys-root"
            )
            
            foreach ($cmd in $commands) {
                $batchArgs = @(
                    "-ssh",
                    "-batch",
                    "-pw", $Password,
                    "$Username@$ESXiHost",
                    $cmd
                )
                
                Write-Host "Executing: $cmd" -ForegroundColor Gray
                $cmdResult = & plink @batchArgs 2>&1
                
                if ($LASTEXITCODE -ne 0) {
                    Write-Warning "Command may have failed: $cmd"
                    Write-Warning "Output: $cmdResult"
                } else {
                    Write-Host "Success: $cmd" -ForegroundColor Green
                }
            }
            
            return $true
        } else {
            Write-Warning "Initial connection failed: $result"
        }
    }
    catch {
        Write-Warning "Plink method failed: $($_.Exception.Message)"
    }
    
    return $false
}

# Alternative method using Windows ssh.exe with echo for password
function Install-SSHKeyToESXi-SSHEcho {
    param(
        [string]$ESXiHost,
        [string]$Username = "root",
        [string]$Password,
        [string]$PublicKeyPath = "$env:USERPROFILE\.ssh\id_rsa.pub"
    )
    
    if (-not (Test-Path $PublicKeyPath)) {
        throw "Public key not found at $PublicKeyPath"
    }
    
    $publicKeyContent = Get-Content $PublicKeyPath -Raw
    $publicKeyContent = $publicKeyContent.Trim()
    
    Write-Host "Installing SSH key to $ESXiHost using ssh.exe..." -ForegroundColor Green
    
    try {
        # Create a PowerShell script that handles the SSH interaction
        $scriptContent = @"
`$password = '$Password'
`$commands = @(
    'mkdir -p /etc/ssh/keys-root',
    'echo ''$publicKeyContent'' >> /etc/ssh/keys-root/authorized_keys',
    'chmod 600 /etc/ssh/keys-root/authorized_keys',
    'chmod 700 /etc/ssh/keys-root',
    'exit'
)

# Use Process.Start to control stdin
`$psi = New-Object System.Diagnostics.ProcessStartInfo
`$psi.FileName = 'ssh'
`$psi.Arguments = '-o StrictHostKeyChecking=no -o UserKnownHostsFile=nul -o PreferredAuthentications=password -o PubkeyAuthentication=no $Username@$ESXiHost'
`$psi.UseShellExecute = `$false
`$psi.RedirectStandardInput = `$true
`$psi.RedirectStandardOutput = `$true
`$psi.RedirectStandardError = `$true

`$process = [System.Diagnostics.Process]::Start(`$psi)

# Send password
`$process.StandardInput.WriteLine(`$password)

# Send commands
foreach (`$cmd in `$commands) {
    `$process.StandardInput.WriteLine(`$cmd)
    Start-Sleep -Milliseconds 100
}

`$process.StandardInput.Close()
`$process.WaitForExit(30000)  # 30 second timeout

`$output = `$process.StandardOutput.ReadToEnd()
`$error = `$process.StandardError.ReadToEnd()

Write-Host "Output: `$output"
if (`$error) { Write-Warning "Error: `$error" }

`$process.Close()
"@
        
        $tempScript = [System.IO.Path]::GetTempFileName() + ".ps1"
        $scriptContent | Out-File -FilePath $tempScript -Encoding UTF8
        
        # Execute the script
        $result = & powershell.exe -ExecutionPolicy Bypass -File $tempScript
        
        # Clean up
        Remove-Item $tempScript -Force
        
        Write-Host "SSH key installation attempted using ssh.exe" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Warning "SSH method failed: $($_.Exception.Message)"
        return $false
    }
}

# Function using pscp to copy a script file and execute it
function Install-SSHKeyToESXi-ScriptUpload {
    param(
        [string]$ESXiHost,
        [string]$Username = "root",
        [string]$Password,
        [string]$PublicKeyPath = "$env:USERPROFILE\.ssh\id_rsa.pub"
    )
    
    if (-not (Get-Command pscp -ErrorAction SilentlyContinue)) {
        Write-Warning "pscp not found. This method requires PuTTY's pscp.exe"
        return $false
    }
    
    if (-not (Test-Path $PublicKeyPath)) {
        throw "Public key not found at $PublicKeyPath"
    }
    
    $publicKeyContent = Get-Content $PublicKeyPath -Raw
    $publicKeyContent = $publicKeyContent.Trim()
    
    Write-Host "Installing SSH key using pscp and script upload..." -ForegroundColor Green
    
    try {
        # Create a script to run on ESXi
        $scriptContent = @"
#!/bin/sh
mkdir -p /etc/ssh/keys-root
echo '$publicKeyContent' >> /etc/ssh/keys-root/authorized_keys
chmod 600 /etc/ssh/keys-root/authorized_keys
chmod 700 /etc/ssh/keys-root
echo "SSH key installation completed"
"@
        
        $tempScript = [System.IO.Path]::GetTempFileName() + ".sh"
        $scriptContent | Out-File -FilePath $tempScript -Encoding UTF8
        
        # Upload script to ESXi
        Write-Host "Uploading script to ESXi..." -ForegroundColor Yellow
        $pscpArgs = @(
            "-pw", $Password,
            "-batch",
            $tempScript,
            "$Username@${ESXiHost}:/tmp/install_key.sh"
        )
        
        $uploadResult = & pscp @pscpArgs 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "Script uploaded, executing..." -ForegroundColor Green
            
            # Execute the script
            $plinkArgs = @(
                "-ssh",
                "-batch",
                "-pw", $Password,
                "$Username@$ESXiHost",
                "chmod +x /tmp/install_key.sh && /tmp/install_key.sh && rm /tmp/install_key.sh"
            )
            
            $execResult = & plink @plinkArgs 2>&1
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "SSH key installed successfully via script upload" -ForegroundColor Green
                Remove-Item $tempScript -Force
                return $true
            } else {
                Write-Warning "Script execution failed: $execResult"
            }
        } else {
            Write-Warning "Script upload failed: $uploadResult"
        }
        
        # Clean up
        Remove-Item $tempScript -Force
    }
    catch {
        Write-Warning "Script upload method failed: $($_.Exception.Message)"
    }
    
# Enhanced version with multiple fallback methods for Windows
function Install-SSHKeyToESXi-WindowsNative {
    param(
        [string]$ESXiHost,
        [string]$Username = "root", 
        [string]$Password,
        [string]$PublicKeyPath = "$env:USERPROFILE\.ssh\id_rsa.pub"
    )
    
    if (-not (Test-Path $PublicKeyPath)) {
        throw "Public key not found at $PublicKeyPath"
    }
    
    Write-Host "Trying multiple methods to install SSH key on $ESXiHost..." -ForegroundColor Green
    
    # Method 1: Script upload (most reliable)
    if (Get-Command pscp -ErrorAction SilentlyContinue) {
        Write-Host "Attempting method 1: Script upload with pscp" -ForegroundColor Yellow
        if (Install-SSHKeyToESXi-ScriptUpload -ESXiHost $ESXiHost -Username $Username -Password $Password -PublicKeyPath $PublicKeyPath) {
            return $true
        }
    }
    
    # Method 2: Interactive plink
    if (Get-Command plink -ErrorAction SilentlyContinue) {
        Write-Host "Attempting method 2: Interactive plink" -ForegroundColor Yellow
        if (Install-SSHKeyToESXi-PlinkInteractive -ESXiHost $ESXiHost -Username $Username -Password $Password -PublicKeyPath $PublicKeyPath) {
            return $true
        }
    }
    
    # Method 3: SSH with process control
    if (Get-Command ssh -ErrorAction SilentlyContinue) {
        Write-Host "Attempting method 3: SSH with process control" -ForegroundColor Yellow
        if (Install-SSHKeyToESXi-SSHEcho -ESXiHost $ESXiHost -Username $Username -Password $Password -PublicKeyPath $PublicKeyPath) {
            return $true
        }
    }
    
    Write-Error "All methods failed for $ESXiHost"
    return $false
}
function Test-SSHTools {
    $tools = @()
    
    if (Get-Command ssh -ErrorAction SilentlyContinue) {
        $tools += "Windows SSH (ssh.exe)"
    }
    
    if (Get-Command plink -ErrorAction SilentlyContinue) {
        $tools += "PuTTY plink"
    }
    
    if (Get-Command sshpass -ErrorAction SilentlyContinue) {
        $tools += "sshpass"
    }
    
    Write-Host "Available SSH tools:" -ForegroundColor Green
    $tools | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
    
    if ($tools.Count -eq 0) {
        Write-Warning "No SSH tools found. Please install OpenSSH or PuTTY."
        Write-Host "To install OpenSSH: Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0" -ForegroundColor Cyan
        Write-Host "To install PuTTY: Download from https://www.putty.org/" -ForegroundColor Cyan
    }
    
    return $tools.Count -gt 0
}
function Test-SSHKeyAuth {
    param(
        [string]$ESXiHost,
        [string]$Username = "root",
        [string]$PrivateKeyPath = "$env:USERPROFILE\.ssh\id_rsa"
    )
    
    try {
        Write-Host "Testing SSH key authentication to $ESXiHost..." -ForegroundColor Green
        $result = ssh -i $PrivateKeyPath -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $Username@$ESXiHost "echo 'SSH key authentication successful'"
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "SSH key authentication successful for $ESXiHost" -ForegroundColor Green
            return $true
        } else {
            Write-Warning "SSH key authentication failed for $ESXiHost"
            return $false
        }
    }
    catch {
        Write-Warning "SSH key authentication test failed: $($_.Exception.Message)"
        return $false
    }
}

# Enhanced version using native Windows tools
function Set-ESXiSSHKeys-Native {
    param(
        [array]$ESXiHosts,
        [string]$Username = "root",
        [string]$Password
    )
    
    # Check available tools
    if (-not (Test-SSHTools)) {
        throw "No SSH tools available"
    }
    
    # Generate SSH key pair
    New-SSHKeyPair
    
    $publicKeyPath = "$env:USERPROFILE\.ssh\id_rsa.pub"
    $privateKeyPath = "$env:USERPROFILE\.ssh\id_rsa"
    
    foreach ($esxiHost in $ESXiHosts) {
        Write-Host "`nProcessing ESXi host: $esxiHost" -ForegroundColor Cyan
        
        try {
            # Add host to known_hosts to avoid fingerprint prompt
            Add-HostToKnownHosts -HostName $esxiHost
            
            # Try the native Windows approach
            $success = Install-SSHKeyToESXi-WindowsNative -ESXiHost $esxiHost -Username $Username -Password $Password -PublicKeyPath $publicKeyPath
            
            if ($success) {
                # Test the key authentication
                Start-Sleep -Seconds 2
                Test-SSHKeyAuth -ESXiHost $esxiHost -Username $Username -PrivateKeyPath $privateKeyPath
            } else {
                Write-Error "Failed to install SSH key on $esxiHost"
            }
        }
        catch {
            Write-Error "Error processing $esxiHost : $($_.Exception.Message)"
        }
    }
}

# Example usage:
# Assuming you have your ESXi hosts and credentials
<#
$esxiHosts = @("esxi1.domain.com", "esxi2.domain.com", "esxi3.domain.com")
$rootPassword = "YourRootPassword"

Set-ESXiSSHKeys -ESXiHosts $esxiHosts -Username "root" -Password $rootPassword
#>

# Function to run esxcli commands using SSH key
function Invoke-ESXiCommand {
    param(
        [string]$ESXiHost,
        [string]$Command,
        [string]$Username = "root",
        [string]$PrivateKeyPath = "$env:USERPROFILE\.ssh\id_rsa"
    )
    
    try {
        $result = ssh -i $PrivateKeyPath -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $Username@$ESXiHost $Command
        return $result
    }
    catch {
        Write-Error "Failed to execute command on $ESXiHost : $($_.Exception.Message)"
        return $null
    }
}
